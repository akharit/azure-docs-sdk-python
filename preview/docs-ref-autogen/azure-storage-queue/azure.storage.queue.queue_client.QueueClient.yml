### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.queue.queue_client.QueueClient.clear_messages
  - azure.storage.queue.queue_client.QueueClient.create_queue
  - azure.storage.queue.queue_client.QueueClient.delete_message
  - azure.storage.queue.queue_client.QueueClient.delete_queue
  - azure.storage.queue.queue_client.QueueClient.enqueue_message
  - azure.storage.queue.queue_client.QueueClient.from_connection_string
  - azure.storage.queue.queue_client.QueueClient.generate_shared_access_signature
  - azure.storage.queue.queue_client.QueueClient.get_queue_access_policy
  - azure.storage.queue.queue_client.QueueClient.get_queue_properties
  - azure.storage.queue.queue_client.QueueClient.peek_messages
  - azure.storage.queue.queue_client.QueueClient.receive_messages
  - azure.storage.queue.queue_client.QueueClient.set_queue_access_policy
  - azure.storage.queue.queue_client.QueueClient.set_queue_metadata
  - azure.storage.queue.queue_client.QueueClient.update_message
  class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.queue._shared.utils.StorageAccountHostsMixin
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: QueueClient
  summary: A client to interact with a specific Queue.
  syntax:
    content: QueueClient(queue_url, queue=None, credential=None, **kwargs)
    parameters:
    - description: 'The full URI to the queue. This can also be a URL to the storage

        account, in which case the queue must also be specified.'
      id: queue_url
      type:
      - str
    - description: 'The queue. If specified, this value will override

        a queue value specified in the queue URL.'
      id: queue
      type:
      - str
      - azure.storage.queue.models.QueueProperties
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        and account

        shared access key, or an instance of a TokenCredentials class from azure.identity.'
      id: credential
    variables:
    - description: 'The full endpoint URL to the Queue, including SAS token if used.
        This could be

        either the primary endpoint, or the secondard endpint depending on the current
        *location_mode*.'
      id: url
      type:
      - str
    - description: The full primary endpoint URL.
      id: primary_endpoint
      type:
      - str
    - description: The hostname of the primary endpoint.
      id: primary_hostname
      type:
      - str
    - description: 'The full secondard endpoint URL if configured. If not available

        a ValueError will be raised. To explicitly specify a secondary hostname, use
        the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_endpoint
      type:
      - str
    - description: 'The hostname of the secondary endpoint. If not available this

        will be None. To explicitly specify a secondary hostname, use the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_hostname
      type:
      - str
    - description: 'The location mode that the client is currently using. By default

        this will be "primary". Options include "primary" and "secondary".'
      id: location_mode
      type:
      - str
  type: class
  uid: azure.storage.queue.queue_client.QueueClient
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.clear_messages
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: clear_messages(timeout=None, **kwargs)
  summary: Deletes all messages from the specified queue.
  syntax:
    content: clear_messages(timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: The server timeout, expressed in seconds.
      id: timeout
      type:
      - int
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.clear_messages
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.create_queue
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: create_queue(metadata=None, timeout=None, **kwargs)
  summary: 'Creates a new queue in the storage account.


    If a queue with the same name already exists, the operation fails.'
  syntax:
    content: create_queue(metadata=None, timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'A dict containing name-value pairs to associate with the queue
        as

        metadata. Note that metadata names preserve the case with which they

        were created, but are case-insensitive when set or read.'
      id: metadata
      type:
      - dict(str, str)
    - defaultValue: None
      description: The server timeout, expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: None or the result of cls(response)
      type:
      - None
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.create_queue
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.delete_message
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: delete_message(message, pop_receipt=None, timeout=None, **kwargs)
  summary: 'Deletes the specified message.


    Normally after a client retrieves a message with the receive messages operation,

    the client is expected to process and delete the message. To delete the

    message, you must have the message object itself, or two items of data: id and
    pop_receipt.

    The id is returned from the previous receive_messages operation. The

    pop_receipt is returned from the most recent <xref:azure.storage.queue.queue_client.receive_messages>
    or

    <xref:azure.storage.queue.queue_client.update_message> operation. In order for
    the delete_message operation

    to succeed, the pop_receipt specified on the request must match the

    pop_receipt returned from the <xref:azure.storage.queue.queue_client.receive_messages>
    or <xref:azure.storage.queue.queue_client.update_message>

    operation.'
  syntax:
    content: delete_message(message, pop_receipt=None, timeout=None, **kwargs)
    parameters:
    - description: The message object or id identifying the message to delete.
      id: message
      type:
      - str
    - defaultValue: None
      description: 'A valid pop receipt value returned from an earlier call

        to the <xref:azure.storage.queue.queue_client.receive_messages> or <xref:azure.storage.queue.queue_client.update_message>.'
      id: pop_receipt
      type:
      - str
    - defaultValue: None
      description: The server timeout, expressed in seconds.
      id: timeout
      type:
      - int
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.delete_message
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.delete_queue
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: delete_queue(timeout=None, **kwargs)
  summary: 'Deletes the specified queue and any messages it contains.


    When a queue is successfully deleted, it is immediately marked for deletion

    and is no longer accessible to clients. The queue is later removed from

    the Queue service during garbage collection.


    Note that deleting a queue is likely to take at least 40 seconds to complete.

    If an operation is attempted against the queue while it was being deleted,

    an <xref:azure.storage.queue.queue_client.HttpResponseError> will be thrown.'
  syntax:
    content: delete_queue(timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: The server timeout, expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.delete_queue
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.enqueue_message
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: enqueue_message(content, visibility_timeout=None, time_to_live=None, timeout=None,
    **kwargs)
  summary: 'Adds a new message to the back of the message queue.


    The visibility timeout specifies the time that the message will be

    invisible. After the timeout expires, the message will become visible.

    If a visibility timeout is not specified, the default value of 0 is used.


    The message time-to-live specifies how long a message will remain in the

    queue. The message will be deleted from the queue when the time-to-live

    period expires.


    If the key-encryption-key field is set on the local service object, this method
    will

    encrypt the content before uploading.'
  syntax:
    content: enqueue_message(content, visibility_timeout=None, time_to_live=None,
      timeout=None, **kwargs)
    parameters:
    - description: 'Message content. Allowed type is determined by the encode_function

        set on the service. Default is str. The encoded message can be up to

        64KB in size.'
      id: content
      type:
      - obj
    - defaultValue: None
      description: 'If not specified, the default value is 0. Specifies the

        new visibility timeout value, in seconds, relative to server time.

        The value must be larger than or equal to 0, and cannot be

        larger than 7 days. The visibility timeout of a message cannot be

        set to a value later than the expiry time. visibility_timeout

        should be set to a value smaller than the time-to-live value.'
      id: visibility_timeout
      type:
      - int
    - defaultValue: None
      description: 'Specifies the time-to-live interval for the message, in

        seconds. The time-to-live may be any positive number or -1 for infinity. If
        this

        parameter is omitted, the default time-to-live is 7 days.'
      id: time_to_live
      type:
      - int
    - defaultValue: None
      description: The server timeout, expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: 'A <xref:azure.storage.queue.models.QueueMessage> object.

        This object is also populated with the content although it is not

        returned from the service.'
      type:
      - azure.storage.queue.models.QueueMessage
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.enqueue_message
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.from_connection_string
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: from_connection_string(conn_str, queue, credential=None, **kwargs)
  summary: Create QueueClient from a Connection String.
  syntax:
    content: from_connection_string(conn_str, queue, credential=None, **kwargs)
    parameters:
    - description: A connection string to an Azure Storage account.
      id: conn_str
      type:
      - str
    - description: 'The queue. This can either be the name of the queue,

        or an instance of QueueProperties.'
      id: queue
      type:
      - str
      - azure.storage.queue.models.QueueProperties
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token, or the connection string already has
        shared

        access key values. The value can be a SAS token string, and account shared
        access

        key, or an instance of a TokenCredentials class from azure.identity.'
      id: credential
    - defaultValue: None
      id: credential
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.from_connection_string
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.generate_shared_access_signature
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: generate_shared_access_signature(permission=None, expiry=None, start=None,
    policy_id=None, ip=None, protocol=None)
  summary: 'Generates a shared access signature for the queue.


    Use the returned signature with the credential parameter of any Queue Service.'
  syntax:
    content: generate_shared_access_signature(permission=None, expiry=None, start=None,
      policy_id=None, ip=None, protocol=None)
    parameters:
    - defaultValue: None
      description: 'The permissions associated with the shared access signature. The

        user is restricted to operations allowed by the permissions.

        Required unless a policy_id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has been

        specified in an associated stored access policy.'
      id: permission
      type:
      - azure.storage.queue.models.QueuePermissions
    - defaultValue: None
      description: 'The time at which the shared access signature becomes invalid.

        Required unless a policy_id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has

        been specified in an associated stored access policy. Azure will always

        convert values to UTC. If a date is passed in without timezone info, it

        is assumed to be UTC.'
      id: expiry
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'The time at which the shared access signature becomes valid. If

        omitted, start time for this call is assumed to be the time when the

        storage service receives the request. Azure will always convert values

        to UTC. If a date is passed in without timezone info, it is assumed to

        be UTC.'
      id: start
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'A unique value up to 64 characters in length that correlates to
        a

        stored access policy. To create a stored access policy, use <xref:azure.storage.queue.queue_client.set_queue_access_policy>.'
      id: policy_id
      type:
      - str
    - defaultValue: None
      description: 'Specifies an IP address or a range of IP addresses from which
        to accept requests.

        If the IP address from which the request originates does not match the IP
        address

        or address range specified on the SAS token, the request is not authenticated.

        For example, specifying sip=''168.1.5.65'' or sip=''168.1.5.60-168.1.5.70''
        on the SAS

        restricts the request to those IP addresses.'
      id: ip
      type:
      - str
    - defaultValue: None
      description: 'Specifies the protocol permitted for a request made. The default
        value

        is https,http.'
      id: protocol
      type:
      - str
    return:
      description: A Shared Access Signature (sas) token.
      type:
      - str
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.generate_shared_access_signature
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.get_queue_access_policy
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: get_queue_access_policy(timeout=None, **kwargs)
  summary: 'Returns details about any stored access policies specified on the

    queue that may be used with Shared Access Signatures.'
  syntax:
    content: get_queue_access_policy(timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: The server timeout, expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: A dictionary of access policies associated with the queue.
      type:
      - dict(str, <xref:azure.storage.queue.models.AccessPolicy>)
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.get_queue_access_policy
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.get_queue_properties
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: get_queue_properties(timeout=None, **kwargs)
  summary: 'Returns all user-defined metadata for the specified queue.


    The data returned does not include the queue''s list of messages.'
  syntax:
    content: get_queue_properties(timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Properties for the specified container within a container object.
      type:
      - azure.storage.queue.models.QueueProperties
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.get_queue_properties
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.peek_messages
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: peek_messages(max_messages=None, timeout=None, **kwargs)
  summary: 'Retrieves one or more messages from the front of the queue, but does

    not alter the visibility of the message.


    Only messages that are visible may be retrieved. When a message is retrieved

    for the first time with a call to <xref:azure.storage.queue.queue_client.receive_messages>,
    its dequeue_count property

    is set to 1. If it is not deleted and is subsequently retrieved again, the

    dequeue_count property is incremented. The client may use this value to

    determine how many times a message has been retrieved. Note that a call

    to peek_messages does not increment the value of DequeueCount, but returns

    this value for the client to read.


    If the key-encryption-key or resolver field is set on the local service object,

    the messages will be decrypted before being returned.'
  syntax:
    content: peek_messages(max_messages=None, timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'A nonzero integer value that specifies the number of

        messages to peek from the queue, up to a maximum of 32. By default,

        a single message is peeked from the queue with this operation.'
      id: max_messages
      type:
      - int
    - defaultValue: None
      description: The server timeout, expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: 'A list of <xref:azure.storage.queue.models.QueueMessage> objects.
        Note that

        time_next_visible and pop_receipt will not be populated as peek does

        not pop the message and can only retrieve already visible messages.'
      type:
      - list(<xref:azure.storage.queue.models.QueueMessage>)
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.peek_messages
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.receive_messages
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: receive_messages(messages_per_page=None, visibility_timeout=None, timeout=None,
    **kwargs)
  summary: 'Removes one or more messages from the front of the queue.


    When a message is retrieved from the queue, the response includes the message

    content and a pop_receipt value, which is required to delete the message.

    The message is not automatically deleted from the queue, but after it has

    been retrieved, it is not visible to other clients for the time interval

    specified by the visibility_timeout parameter.


    If the key-encryption-key or resolver field is set on the local service object,
    the messages will be

    decrypted before being returned.'
  syntax:
    content: receive_messages(messages_per_page=None, visibility_timeout=None, timeout=None,
      **kwargs)
    parameters:
    - defaultValue: None
      description: 'A nonzero integer value that specifies the number of

        messages to retrieve from the queue, up to a maximum of 32. If

        fewer are visible, the visible messages are returned. By default,

        a single message is retrieved from the queue with this operation.'
      id: messages_per_page
      type:
      - int
    - defaultValue: None
      description: 'If not specified, the default value is 0. Specifies the

        new visibility timeout value, in seconds, relative to server time.

        The value must be larger than or equal to 0, and cannot be

        larger than 7 days. The visibility timeout of a message cannot be

        set to a value later than the expiry time. visibility_timeout

        should be set to a value smaller than the time-to-live value.'
      id: visibility_timeout
      type:
      - int
    - defaultValue: None
      description: The server timeout, expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Returns a message iterator of dict-like Message objects.
      type:
      - azure.storage.queue.models.MessagesPaged
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.receive_messages
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.set_queue_access_policy
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: set_queue_access_policy(signed_identifiers=None, timeout=None, **kwargs)
  summary: 'Sets stored access policies for the queue that may be used with Shared

    Access Signatures.


    When you set permissions for a queue, the existing permissions are replaced.

    To update the queue''s permissions, call <xref:azure.storage.queue.queue_client.QueueClient.get_queue_access_policy>
    to fetch

    all access policies associated with the queue, modify the access policy

    that you wish to change, and then call this function with the complete

    set of data to perform the update.


    When you establish a stored access policy on a queue, it may take up to

    30 seconds to take effect. During this interval, a shared access signature

    that is associated with the stored access policy will throw an

    <xref:azure.storage.queue.queue_client.HttpResponseError> until the access policy
    becomes active.'
  syntax:
    content: set_queue_access_policy(signed_identifiers=None, timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'A list of SignedIdentifier access policies to associate with the
        queue.

        The list may contain up to 5 elements. An empty list

        will clear the access policies set on the service.'
      id: signed_identifiers
      type:
      - dict(str, <xref:azure.storage.queue.models.AccessPolicy>)
    - defaultValue: None
      description: The server timeout, expressed in seconds.
      id: timeout
      type:
      - int
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.set_queue_access_policy
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.set_queue_metadata
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: set_queue_metadata(metadata=None, timeout=None, **kwargs)
  summary: 'Sets user-defined metadata on the specified queue.


    Metadata is associated with the queue as name-value pairs.'
  syntax:
    content: set_queue_metadata(metadata=None, timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'A dict containing name-value pairs to associate with the

        queue as metadata.'
      id: metadata
      type:
      - dict(str, str)
    - defaultValue: None
      description: The server timeout, expressed in seconds.
      id: timeout
      type:
      - int
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.set_queue_metadata
- class: azure.storage.queue.queue_client.QueueClient
  fullName: azure.storage.queue.queue_client.QueueClient.update_message
  langs:
  - python
  module: azure.storage.queue.queue_client
  name: update_message(message, visibility_timeout=None, pop_receipt=None, content=None,
    timeout=None, **kwargs)
  summary: 'Updates the visibility timeout of a message. You can also use this

    operation to update the contents of a message.


    This operation can be used to continually extend the invisibility of a

    queue message. This functionality can be useful if you want a worker role

    to "lease" a queue message. For example, if a worker role calls <xref:azure.storage.queue.queue_client.QueueClient.receive_messages>

    and recognizes that it needs more time to process a message, it can

    continually extend the message''s invisibility until it is processed. If

    the worker role were to fail during processing, eventually the message

    would become visible again and another worker role could process it.


    If the key-encryption-key field is set on the local service object, this method
    will

    encrypt the content before uploading.'
  syntax:
    content: update_message(message, visibility_timeout=None, pop_receipt=None, content=None,
      timeout=None, **kwargs)
    parameters:
    - description: The message object or id identifying the message to update.
      id: message
      type:
      - str
    - defaultValue: None
      description: 'Specifies the new visibility timeout value, in seconds,

        relative to server time. The new value must be larger than or equal

        to 0, and cannot be larger than 7 days. The visibility timeout of a

        message cannot be set to a value later than the expiry time. A

        message can be updated until it has been deleted or has expired.

        The message object or message id identifying the message to update.'
      id: visibility_timeout
      type:
      - int
    - defaultValue: None
      description: 'A valid pop receipt value returned from an earlier call

        to the <xref:azure.storage.queue.queue_client.QueueClient.receive_messages>
        or <xref:azure.storage.queue.queue_client.QueueClient.update_message> operation.'
      id: pop_receipt
      type:
      - str
    - defaultValue: None
      description: 'Message content. Allowed type is determined by the encode_function

        set on the service. Default is str.'
      id: content
      type:
      - obj
    - defaultValue: None
      description: The server timeout, expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: 'A <xref:azure.storage.queue.models.QueueMessage> object. For convenience,

        this object is also populated with the content, although it is not returned
        by the service.'
      type:
      - azure.storage.queue.models.QueueMessage
  type: method
  uid: azure.storage.queue.queue_client.QueueClient.update_message
references:
- fullName: azure.storage.queue.queue_client.QueueClient.clear_messages
  isExternal: false
  name: clear_messages(timeout=None, **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.clear_messages
- fullName: azure.storage.queue.queue_client.QueueClient.create_queue
  isExternal: false
  name: create_queue(metadata=None, timeout=None, **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.create_queue
- fullName: azure.storage.queue.queue_client.QueueClient.delete_message
  isExternal: false
  name: delete_message(message, pop_receipt=None, timeout=None, **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.delete_message
- fullName: azure.storage.queue.queue_client.QueueClient.delete_queue
  isExternal: false
  name: delete_queue(timeout=None, **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.delete_queue
- fullName: azure.storage.queue.queue_client.QueueClient.enqueue_message
  isExternal: false
  name: enqueue_message(content, visibility_timeout=None, time_to_live=None, timeout=None,
    **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.enqueue_message
- fullName: azure.storage.queue.queue_client.QueueClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, queue, credential=None, **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.from_connection_string
- fullName: azure.storage.queue.queue_client.QueueClient.generate_shared_access_signature
  isExternal: false
  name: generate_shared_access_signature(permission=None, expiry=None, start=None,
    policy_id=None, ip=None, protocol=None)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.generate_shared_access_signature
- fullName: azure.storage.queue.queue_client.QueueClient.get_queue_access_policy
  isExternal: false
  name: get_queue_access_policy(timeout=None, **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.get_queue_access_policy
- fullName: azure.storage.queue.queue_client.QueueClient.get_queue_properties
  isExternal: false
  name: get_queue_properties(timeout=None, **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.get_queue_properties
- fullName: azure.storage.queue.queue_client.QueueClient.peek_messages
  isExternal: false
  name: peek_messages(max_messages=None, timeout=None, **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.peek_messages
- fullName: azure.storage.queue.queue_client.QueueClient.receive_messages
  isExternal: false
  name: receive_messages(messages_per_page=None, visibility_timeout=None, timeout=None,
    **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.receive_messages
- fullName: azure.storage.queue.queue_client.QueueClient.set_queue_access_policy
  isExternal: false
  name: set_queue_access_policy(signed_identifiers=None, timeout=None, **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.set_queue_access_policy
- fullName: azure.storage.queue.queue_client.QueueClient.set_queue_metadata
  isExternal: false
  name: set_queue_metadata(metadata=None, timeout=None, **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.set_queue_metadata
- fullName: azure.storage.queue.queue_client.QueueClient.update_message
  isExternal: false
  name: update_message(message, visibility_timeout=None, pop_receipt=None, content=None,
    timeout=None, **kwargs)
  parent: azure.storage.queue.queue_client.QueueClient
  uid: azure.storage.queue.queue_client.QueueClient.update_message
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: dict(str, <xref:azure.storage.queue.models.AccessPolicy>)
  name: dict(str, AccessPolicy>)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: <xref:azure.storage.queue.models.AccessPolicy>
    name: AccessPolicy>
    uid: <xref:azure.storage.queue.models.AccessPolicy>
  - fullName: )
    name: )
  uid: dict(str, <xref:azure.storage.queue.models.AccessPolicy>)
- fullName: list(<xref:azure.storage.queue.models.QueueMessage>)
  name: list(QueueMessage>)
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: (
    name: (
  - fullName: <xref:azure.storage.queue.models.QueueMessage>
    name: QueueMessage>
    uid: <xref:azure.storage.queue.models.QueueMessage>
  - fullName: )
    name: )
  uid: list(<xref:azure.storage.queue.models.QueueMessage>)
