### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.keyvault.keys.KeyClient.backup_key
  - azure.keyvault.keys.KeyClient.create_ec_key
  - azure.keyvault.keys.KeyClient.create_key
  - azure.keyvault.keys.KeyClient.create_rsa_key
  - azure.keyvault.keys.KeyClient.delete_key
  - azure.keyvault.keys.KeyClient.get_deleted_key
  - azure.keyvault.keys.KeyClient.get_key
  - azure.keyvault.keys.KeyClient.import_key
  - azure.keyvault.keys.KeyClient.list_deleted_keys
  - azure.keyvault.keys.KeyClient.list_key_versions
  - azure.keyvault.keys.KeyClient.list_keys
  - azure.keyvault.keys.KeyClient.purge_deleted_key
  - azure.keyvault.keys.KeyClient.recover_deleted_key
  - azure.keyvault.keys.KeyClient.restore_key
  - azure.keyvault.keys.KeyClient.unwrap_key
  - azure.keyvault.keys.KeyClient.update_key
  - azure.keyvault.keys.KeyClient.wrap_key
  class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.keyvault.keys._internal._KeyVaultClientBase
  langs:
  - python
  module: azure.keyvault.keys
  name: KeyClient
  summary: KeyClient is a high-level interface for managing a vault's keys.
  syntax:
    content: KeyClient(vault_url, credential, config=None, transport=None, api_version=None,
      **kwargs)
  type: class
  uid: azure.keyvault.keys.KeyClient
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.backup_key
  langs:
  - python
  module: azure.keyvault.keys
  name: backup_key(name, **kwargs)
  summary: 'Backs up the specified key.


    Requests that a backup of the specified secret be downloaded to the client.

    The Key Backup operation exports a key from Azure Key Vault in a

    protected form. Note that this operation does NOT return key material

    in a form that can be used outside the Azure Key Vault system, the

    returned key material is either protected to a Azure Key Vault HSM or

    to Azure Key Vault itself. The intent of this operation is to allow a

    client to GENERATE a key in one Azure Key Vault instance, BACKUP the

    key, and then RESTORE it into another Azure Key Vault instance. The

    BACKUP operation may be used to export, in protected form, any key type

    from Azure Key Vault. Individual versions of a key cannot be backed up.

    BACKUP / RESTORE can be performed within geographical boundaries only;

    meaning that a BACKUP from one geographical area cannot be restored to

    another geographical area. For example, a backup from the US

    geographical area cannot be restored in an EU geographical area. This

    operation requires the key/backup permission.'
  syntax:
    content: backup_key(name, **kwargs)
    parameters:
    - description: The name of the key.
      id: name
      type:
      - str
    return:
      description: The raw bytes of the key backup.
      type:
      - bytes
  type: method
  uid: azure.keyvault.keys.KeyClient.backup_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.create_ec_key
  langs:
  - python
  module: azure.keyvault.keys
  name: create_ec_key(name, hsm, curve=None, key_operations=None, enabled=None, expires=None,
    not_before=None, tags=None, **kwargs)
  summary: 'Creates a new Elliptic curve type key, stores it, then returns key to
    the client.


    The create key operation can be used to create any key type in Azure

    Key Vault. If the named key already exists, Azure Key Vault creates a

    new version of the key. It requires the keys/create permission.'
  syntax:
    content: create_ec_key(name, hsm, curve=None, key_operations=None, enabled=None,
      expires=None, not_before=None, tags=None, **kwargs)
    parameters:
    - description: 'The name for the new key. The system will generate

        the version name for the new key.'
      id: name
      type:
      - str
    - description: Whether to create as a hardware key (HSM) or software key.
      id: hsm
      type:
      - bool
    - defaultValue: None
      description: 'Elliptic curve name. If none then defaults to ''P-256''. For valid
        values, see

        JsonWebKeyCurveName. Possible values include: ''P-256'', ''P-384'',

        ''P-521'', ''SECP256K1'''
      id: curve
      type:
      - str
      - azure.keyvault.keys._generated.v7_0.models.JsonWebKeyCurveName
    - defaultValue: None
      description: Supported key operations.
      id: key_operations
      type:
      - list[str
      - azure.keyvault.keys._generated.v7_0.models.JsonWebKeyOperation]
    - defaultValue: None
      description: Determines whether the object is enabled.
      id: enabled
      type:
      - bool
    - defaultValue: None
      description: Expiry date of the key  in UTC.
      id: expires
      type:
      - datetime.datetime
    - defaultValue: None
      description: Not before date of the key in UTC
      id: not_before
      type:
      - datetime.datetime
    - defaultValue: None
      description: 'Application specific metadata in the form of key-value

        pairs.'
      id: tags
      type:
      - Dict[str, str]
    return:
      description: The created EC key
      type:
      - azure.keyvault.keys._models.Key
  type: method
  uid: azure.keyvault.keys.KeyClient.create_ec_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.create_key
  langs:
  - python
  module: azure.keyvault.keys
  name: create_key(name, key_type, size=None, key_operations=None, enabled=None, expires=None,
    not_before=None, tags=None, curve=None, **kwargs)
  summary: 'Creates a new key, stores it, then returns the key to the client.


    The create key operation can be used to create any key type in Azure

    Key Vault. If the named key already exists, Azure Key Vault creates a

    new version of the key. It requires the keys/create permission.'
  syntax:
    content: create_key(name, key_type, size=None, key_operations=None, enabled=None,
      expires=None, not_before=None, tags=None, curve=None, **kwargs)
    parameters:
    - description: 'The name for the new key. The system will generate

        the version name for the new key.'
      id: name
      type:
      - str
    - description: 'The type of key to create. For valid values, see

        JsonWebKeyType. Possible values include: ''EC'', ''EC-HSM'', ''RSA'',

        ''RSA-HSM'', ''oct'''
      id: key_type
      type:
      - str
      - azure.keyvault.keys._generated.v7_0.models.JsonWebKeyType
    - defaultValue: None
      description: 'The key size in bits. For example: 2048, 3072, or

        4096 for RSA.'
      id: size
      type:
      - int
    - defaultValue: None
      description: Supported key operations.
      id: key_operations
      type:
      - list[str
      - azure.keyvault.keys._generated.v7_0.models.JsonWebKeyOperation]
    - defaultValue: None
      description: Determines whether the object is enabled.
      id: enabled
      type:
      - bool
    - defaultValue: None
      description: Expiry date of the key  in UTC.
      id: expires
      type:
      - datetime.datetime
    - defaultValue: None
      description: Not before date of the key in UTC
      id: not_before
      type:
      - datetime.datetime
    - defaultValue: None
      description: 'Application specific metadata in the form of key-value

        pairs.'
      id: tags
      type:
      - Dict[str, str]
    - defaultValue: None
      description: 'Elliptic curve name. If none then defaults to ''P-256''. For valid
        values, see

        JsonWebKeyCurveName. Possible values include: ''P-256'', ''P-384'',

        ''P-521'', ''SECP256K1'''
      id: curve
      type:
      - str
      - azure.keyvault.keys._generated.v7_0.models.JsonWebKeyCurveName
    return:
      description: The created key
      type:
      - azure.keyvault.keys._models.Key
  type: method
  uid: azure.keyvault.keys.KeyClient.create_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.create_rsa_key
  langs:
  - python
  module: azure.keyvault.keys
  name: create_rsa_key(name, hsm, size=None, key_operations=None, enabled=None, expires=None,
    not_before=None, tags=None, **kwargs)
  summary: 'Creates a new RSA type key, stores it, then returns key to the client.


    The create key operation can be used to create any key type in Azure

    Key Vault. If the named key already exists, Azure Key Vault creates a

    new version of the key. It requires the keys/create permission.'
  syntax:
    content: create_rsa_key(name, hsm, size=None, key_operations=None, enabled=None,
      expires=None, not_before=None, tags=None, **kwargs)
    parameters:
    - description: 'The name for the new key. The system will generate

        the version name for the new key.'
      id: name
      type:
      - str
    - description: Whether to create as a hardware key (HSM) or software key.
      id: hsm
      type:
      - bool
    - defaultValue: None
      description: 'The key size in bits. For example: 2048, 3072, or

        4096 for RSA.'
      id: size
      type:
      - int
    - defaultValue: None
      description: Supported key operations.
      id: key_operations
      type:
      - list[str
      - azure.keyvault.keys._generated.v7_0.models.JsonWebKeyOperation]
    - defaultValue: None
      description: Determines whether the object is enabled.
      id: enabled
      type:
      - bool
    - defaultValue: None
      description: Expiry date of the key  in UTC.
      id: expires
      type:
      - datetime.datetime
    - defaultValue: None
      description: Not before date of the key in UTC
      id: not_before
      type:
      - datetime.datetime
    - defaultValue: None
      description: 'Application specific metadata in the form of key-value

        pairs.'
      id: tags
      type:
      - Dict[str, str]
    return:
      description: The created RSA key
      type:
      - azure.keyvault.keys._models.Key
  type: method
  uid: azure.keyvault.keys.KeyClient.create_rsa_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.delete_key
  langs:
  - python
  module: azure.keyvault.keys
  name: delete_key(name, **kwargs)
  summary: 'Deletes a key from the Key Vault.


    The delete key operation cannot be used to remove individual versions

    of a key. This operation removes the cryptographic material associated

    with the key, which means the key is not usable for Sign/Verify,

    Wrap/Unwrap or Encrypt/Decrypt operations. This operation requires the

    keys/delete permission.'
  syntax:
    content: delete_key(name, **kwargs)
    parameters:
    - description: The name of the key to delete.
      id: name
      type:
      - str
    return:
      description: The deleted key
      type:
      - azure.keyvault.keys._models.DeletedKey
  type: method
  uid: azure.keyvault.keys.KeyClient.delete_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.get_deleted_key
  langs:
  - python
  module: azure.keyvault.keys
  name: get_deleted_key(name, **kwargs)
  summary: 'Gets a deleted key from the Key Vault


    The Get Deleted Key operation is applicable for soft-delete enabled

    vaults. While the operation can be invoked on any vault, it will return

    an error if invoked on a non soft-delete enabled vault. This operation

    requires the keys/get permission.'
  syntax:
    content: get_deleted_key(name, **kwargs)
    parameters:
    - description: The name of the key.
      id: name
      type:
      - str
    return:
      description: The deleted key
      type:
      - azure.keyvault.keys._models.DeletedKey
  type: method
  uid: azure.keyvault.keys.KeyClient.get_deleted_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.get_key
  langs:
  - python
  module: azure.keyvault.keys
  name: get_key(name, version=None, **kwargs)
  summary: 'Gets the public part of a stored key.


    The get key operation is applicable to all key types. If the requested

    key is symmetric, then no key material is released in the response.

    This operation requires the keys/get permission.'
  syntax:
    content: get_key(name, version=None, **kwargs)
    parameters:
    - description: The name of the key to get.
      id: name
      type:
      - str
    - defaultValue: None
      description: 'Retrieves a specific version of a key. If the version is None
        or an empty string,

        the latest version of the key is returned'
      id: version
      type:
      - str
    return:
      description: Key
      type:
      - azure.keyvault.keys._models.Key
  type: method
  uid: azure.keyvault.keys.KeyClient.get_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.import_key
  langs:
  - python
  module: azure.keyvault.keys
  name: import_key(name, key, hsm=None, enabled=None, not_before=None, expires=None,
    tags=None, **kwargs)
  summary: 'Imports an externally created key, stores it, and returns the key to the
    client.


    The import key operation may be used to import any key type into an

    Azure Key Vault. If the named key already exists, Azure Key Vault

    creates a new version of the key. This operation requires the

    keys/import permission.'
  syntax:
    content: import_key(name, key, hsm=None, enabled=None, not_before=None, expires=None,
      tags=None, **kwargs)
    parameters:
    - description: Name for the imported key.
      id: name
      type:
      - str
    - description: The Json web key
      id: key
      type:
      - azure.security.keyvault.v7_0.models.JsonWebKey
    - defaultValue: None
      description: Whether to import as a hardware key (HSM) or software key.
      id: hsm
      type:
      - bool
    - defaultValue: None
      description: Determines whether the object is enabled.
      id: enabled
      type:
      - bool
    - defaultValue: None
      description: Expiry date of the key  in UTC.
      id: expires
      type:
      - datetime.datetime
    - defaultValue: None
      description: Not before date of the key in UTC
      id: not_before
      type:
      - datetime.datetime
    - defaultValue: None
      description: 'Application specific metadata in the form of key-value

        pairs.'
      id: tags
      type:
      - Dict[str, str]
    return:
      description: The imported key
      type:
      - azure.keyvault.keys._models.Key
  type: method
  uid: azure.keyvault.keys.KeyClient.import_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.list_deleted_keys
  langs:
  - python
  module: azure.keyvault.keys
  name: list_deleted_keys(**kwargs)
  summary: 'Lists the deleted keys in the Key Vault


    Retrieves a list of the keys in the Key Vault as JSON Web Key

    structures that contain the public part of a deleted key. This

    operation includes deletion-specific information. The Get Deleted Keys

    operation is applicable for vaults enabled for soft-delete. While the

    operation can be invoked on any vault, it will return an error if

    invoked on a non soft-delete enabled vault. This operation requires the

    keys/list permission.'
  syntax:
    content: list_deleted_keys(**kwargs)
    parameters: []
    return:
      description: An iterator like instance of DeletedKey
      type:
      - Generator[azure.keyvault.keys._models.DeletedKey]
  type: method
  uid: azure.keyvault.keys.KeyClient.list_deleted_keys
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.list_key_versions
  langs:
  - python
  module: azure.keyvault.keys
  name: list_key_versions(name, **kwargs)
  summary: 'Retrieves a list of individual key versions with the same key name.


    The full key identifier, attributes, and tags are provided in the

    response. This operation requires the keys/list permission.'
  syntax:
    content: list_key_versions(name, **kwargs)
    parameters:
    - description: The name of the key.
      id: name
      type:
      - str
    return:
      description: An iterator like instance of KeyBase
      type:
      - Generator[azure.keyvault.keys._models.KeyBase]
  type: method
  uid: azure.keyvault.keys.KeyClient.list_key_versions
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.list_keys
  langs:
  - python
  module: azure.keyvault.keys
  name: list_keys(**kwargs)
  summary: 'List the keys in the Key Vault


    Retrieves a list of the keys in the Key Vault as JSON Web Key

    structures that contain the public part of a stored key. The LIST

    operation is applicable to all key types, however only the base key

    identifier, attributes, and tags are provided in the response.

    Individual versions of a key are not listed in the response. This

    operation requires the keys/list permission.'
  syntax:
    content: list_keys(**kwargs)
    parameters: []
    return:
      description: An iterator like instance of KeyBase
      type:
      - Generator[azure.keyvault.keys._models.KeyBase]
  type: method
  uid: azure.keyvault.keys.KeyClient.list_keys
- class: azure.keyvault.keys.KeyClient
  example:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   # if the\
    \ vault has soft-delete enabled, purge permanently deletes a deleted key\n   #\
    \ (with soft-delete disabled, delete itself is permanent)\n   key_client.purge_deleted_key(\"\
    key-name\")\n   ````\n"
  fullName: azure.keyvault.keys.KeyClient.purge_deleted_key
  langs:
  - python
  module: azure.keyvault.keys
  name: purge_deleted_key(name, **kwargs)
  summary: 'Permanently deletes the specified key.


    The Purge Deleted Key operation is applicable for soft-delete enabled

    vaults. While the operation can be invoked on any vault, it will return

    an error if invoked on a non soft-delete enabled vault. This operation

    requires the keys/purge permission.'
  syntax:
    content: purge_deleted_key(name, **kwargs)
    parameters:
    - description: The name of the key
      id: name
      type:
      - str
    return:
      description: None
      type:
      - None
  type: method
  uid: azure.keyvault.keys.KeyClient.purge_deleted_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.recover_deleted_key
  langs:
  - python
  module: azure.keyvault.keys
  name: recover_deleted_key(name, **kwargs)
  summary: 'Recovers the deleted key to its latest version.


    The Recover Deleted Key operation is applicable for deleted keys in

    soft-delete enabled vaults. It recovers the deleted key back to its

    latest version under /keys. An attempt to recover an non-deleted key

    will return an error. Consider this the inverse of the delete operation

    on soft-delete enabled vaults. This operation requires the keys/recover

    permission.'
  syntax:
    content: recover_deleted_key(name, **kwargs)
    parameters:
    - description: The name of the deleted key.
      id: name
      type:
      - str
    return:
      description: The recovered deleted key
      type:
      - azure.keyvault.keys._models.Key
  type: method
  uid: azure.keyvault.keys.KeyClient.recover_deleted_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.restore_key
  langs:
  - python
  module: azure.keyvault.keys
  name: restore_key(backup, **kwargs)
  summary: 'Restores a backed up key to the Key Vault


    Imports a previously backed up key into Azure Key Vault, restoring the

    key, its key identifier, attributes and access control policies. The

    RESTORE operation may be used to import a previously backed up key.

    Individual versions of a key cannot be restored. The key is restored in

    its entirety with the same key name as it had when it was backed up. If

    the key name is not available in the target Key Vault, the RESTORE

    operation will be rejected. While the key name is retained during

    restore, the final key identifier will change if the key is restored to

    a different vault. Restore will restore all versions and preserve

    version identifiers. The RESTORE operation is subject to security

    constraints: The target Key Vault must be owned by the same Microsoft

    Azure Subscription as the source Key Vault The user must have RESTORE

    permission in the target Key Vault. This operation requires the

    keys/restore permission.'
  syntax:
    content: restore_key(backup, **kwargs)
    parameters:
    - description: The raw bytes of the key backup
      id: backup
      type:
      - bytes
    return:
      description: The restored key
      type:
      - azure.keyvault.keys._models.Key
  type: method
  uid: azure.keyvault.keys.KeyClient.restore_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.unwrap_key
  langs:
  - python
  module: azure.keyvault.keys
  name: unwrap_key(name, algorithm, value, version=None, **kwargs)
  summary: 'Unwraps a symmetric key using the specified key that was initially used

    for wrapping that key.


    The UNWRAP operation supports decryption of a symmetric key using the

    target key encryption key. This operation is the reverse of the WRAP

    operation. The UNWRAP operation applies to asymmetric and symmetric

    keys stored in Azure Key Vault since it uses the private portion of the

    key. This operation requires the keys/unwrapKey permission.'
  syntax:
    content: unwrap_key(name, algorithm, value, version=None, **kwargs)
    parameters:
    - description: The name of the key.
      id: name
      type:
      - str
    - description: The version of the key.
      id: version
      type:
      - str
    - description: 'algorithm identifier. Possible values include:

        ''RSA-OAEP'', ''RSA-OAEP-256'', ''RSA1_5'''
      id: algorithm
      type:
      - str
      - azure.security.keyvault.v7_0.models.JsonWebKeyEncryptionAlgorithm
    - defaultValue: None
      description: ''
      id: value
      type:
      - bytes
    return:
      description: The unwrapped symmetric key.
      type:
      - azure.keyvault.keys._models.KeyOperationResult
  type: method
  uid: azure.keyvault.keys.KeyClient.unwrap_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.update_key
  langs:
  - python
  module: azure.keyvault.keys
  name: update_key(name, version=None, key_operations=None, enabled=None, expires=None,
    not_before=None, tags=None, **kwargs)
  summary: 'The update key operation changes specified attributes of a stored key

    and can be applied to any key type and key version stored in Azure Key

    Vault.


    In order to perform this operation, the key must already exist in the

    Key Vault. Note: The cryptographic material of a key itself cannot be

    changed. This operation requires the keys/update permission.'
  syntax:
    content: update_key(name, version=None, key_operations=None, enabled=None, expires=None,
      not_before=None, tags=None, **kwargs)
    parameters:
    - description: The name of key to update.
      id: name
      type:
      - str
    - defaultValue: None
      description: The version of the key to update.
      id: version
      type:
      - str
    - defaultValue: None
      description: 'Json web key operations. For more information on

        possible key operations, see JsonWebKeyOperation.'
      id: key_operations
      type:
      - list[str
      - azure.keyvault.keys._generated.v7_0.models.JsonWebKeyOperation]
    - defaultValue: None
      description: Determines whether the object is enabled.
      id: enabled
      type:
      - bool
    - defaultValue: None
      description: Expiry date of the key  in UTC.
      id: expires
      type:
      - datetime.datetime
    - defaultValue: None
      description: Not before date of the key in UTC
      id: not_before
      type:
      - datetime.datetime
    - defaultValue: None
      description: 'Application specific metadata in the form of key-value

        pairs.'
      id: tags
      type:
      - Dict[str, str]
    return:
      description: The updated key
      type:
      - azure.keyvault.keys._models.Key
  type: method
  uid: azure.keyvault.keys.KeyClient.update_key
- class: azure.keyvault.keys.KeyClient
  fullName: azure.keyvault.keys.KeyClient.wrap_key
  langs:
  - python
  module: azure.keyvault.keys
  name: wrap_key(name, algorithm, value, version=None, **kwargs)
  summary: 'Wraps a symmetric key using a specified key.


    The WRAP operation supports encryption of a symmetric key using a key

    encryption key that has previously been stored in an Azure Key Vault.

    The WRAP operation is only strictly necessary for symmetric keys stored

    in Azure Key Vault since protection with an asymmetric key can be

    performed using the public portion of the key. This operation is

    supported for asymmetric keys as a convenience for callers that have a

    key-reference but do not have access to the public key material. This

    operation requires the keys/wrapKey permission.'
  syntax:
    content: wrap_key(name, algorithm, value, version=None, **kwargs)
    parameters:
    - description: The name of the key.
      id: name
      type:
      - str
    - description: The version of the key.
      id: version
      type:
      - str
    - description: 'algorithm identifier. Possible values include:

        ''RSA-OAEP'', ''RSA-OAEP-256'', ''RSA1_5'''
      id: algorithm
      type:
      - str
      - azure.security.keyvault.v7_0.models.JsonWebKeyEncryptionAlgorithm
    - defaultValue: None
      description: ''
      id: value
      type:
      - bytes
    return:
      description: The wrapped symmetric key.
      type:
      - azure.keyvault.keys._models.KeyOperationResult
  type: method
  uid: azure.keyvault.keys.KeyClient.wrap_key
references:
- fullName: azure.keyvault.keys.KeyClient.backup_key
  isExternal: false
  name: backup_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.backup_key
- fullName: azure.keyvault.keys.KeyClient.create_ec_key
  isExternal: false
  name: create_ec_key(name, hsm, curve=None, key_operations=None, enabled=None, expires=None,
    not_before=None, tags=None, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.create_ec_key
- fullName: azure.keyvault.keys.KeyClient.create_key
  isExternal: false
  name: create_key(name, key_type, size=None, key_operations=None, enabled=None, expires=None,
    not_before=None, tags=None, curve=None, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.create_key
- fullName: azure.keyvault.keys.KeyClient.create_rsa_key
  isExternal: false
  name: create_rsa_key(name, hsm, size=None, key_operations=None, enabled=None, expires=None,
    not_before=None, tags=None, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.create_rsa_key
- fullName: azure.keyvault.keys.KeyClient.delete_key
  isExternal: false
  name: delete_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.delete_key
- fullName: azure.keyvault.keys.KeyClient.get_deleted_key
  isExternal: false
  name: get_deleted_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.get_deleted_key
- fullName: azure.keyvault.keys.KeyClient.get_key
  isExternal: false
  name: get_key(name, version=None, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.get_key
- fullName: azure.keyvault.keys.KeyClient.import_key
  isExternal: false
  name: import_key(name, key, hsm=None, enabled=None, not_before=None, expires=None,
    tags=None, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.import_key
- fullName: azure.keyvault.keys.KeyClient.list_deleted_keys
  isExternal: false
  name: list_deleted_keys(**kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.list_deleted_keys
- fullName: azure.keyvault.keys.KeyClient.list_key_versions
  isExternal: false
  name: list_key_versions(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.list_key_versions
- fullName: azure.keyvault.keys.KeyClient.list_keys
  isExternal: false
  name: list_keys(**kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.list_keys
- fullName: azure.keyvault.keys.KeyClient.purge_deleted_key
  isExternal: false
  name: purge_deleted_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.purge_deleted_key
- fullName: azure.keyvault.keys.KeyClient.recover_deleted_key
  isExternal: false
  name: recover_deleted_key(name, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.recover_deleted_key
- fullName: azure.keyvault.keys.KeyClient.restore_key
  isExternal: false
  name: restore_key(backup, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.restore_key
- fullName: azure.keyvault.keys.KeyClient.unwrap_key
  isExternal: false
  name: unwrap_key(name, algorithm, value, version=None, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.unwrap_key
- fullName: azure.keyvault.keys.KeyClient.update_key
  isExternal: false
  name: update_key(name, version=None, key_operations=None, enabled=None, expires=None,
    not_before=None, tags=None, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.update_key
- fullName: azure.keyvault.keys.KeyClient.wrap_key
  isExternal: false
  name: wrap_key(name, algorithm, value, version=None, **kwargs)
  parent: azure.keyvault.keys.KeyClient
  uid: azure.keyvault.keys.KeyClient.wrap_key
- fullName: list[str
  name: list[str
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  uid: list[str
- fullName: azure.keyvault.keys._generated.v7_0.models.JsonWebKeyOperation]
  name: JsonWebKeyOperation]
  spec.python:
  - fullName: azure.keyvault.keys._generated.v7_0.models.JsonWebKeyOperation
    name: JsonWebKeyOperation
    uid: azure.keyvault.keys._generated.v7_0.models.JsonWebKeyOperation
  - fullName: ']'
    name: ']'
  uid: azure.keyvault.keys._generated.v7_0.models.JsonWebKeyOperation]
- fullName: Dict[str, str]
  name: Dict[str, str]
  spec.python:
  - fullName: Dict
    name: Dict
    uid: Dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: Dict[str, str]
- fullName: Generator[azure.keyvault.keys._models.DeletedKey]
  name: Generator[DeletedKey]
  spec.python:
  - fullName: Generator
    name: Generator
    uid: Generator
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.keys._models.DeletedKey
    name: DeletedKey
    uid: azure.keyvault.keys._models.DeletedKey
  - fullName: ']'
    name: ']'
  uid: Generator[azure.keyvault.keys._models.DeletedKey]
- fullName: Generator[azure.keyvault.keys._models.KeyBase]
  name: Generator[KeyBase]
  spec.python:
  - fullName: Generator
    name: Generator
    uid: Generator
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.keys._models.KeyBase
    name: KeyBase
    uid: azure.keyvault.keys._models.KeyBase
  - fullName: ']'
    name: ']'
  uid: Generator[azure.keyvault.keys._models.KeyBase]
