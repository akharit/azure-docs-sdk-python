### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.acquire_lease_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_if_not_exists_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_store_if_not_exists_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_store_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_all_leases
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_lease_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.release_lease_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.renew_lease_async
  - azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.update_lease_async
  class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  inheritance:
  - inheritance:
    - type: builtins.object
    type: abc.ABC
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: AbstractLeaseManager
  summary: 'If you wish to have EventProcessorHost store leases somewhere other than
    Azure Storage,

    you can write your own lease manager using this abstract class. The Azure Storage
    managers

    use the same storage for both lease and checkpoints, so both interfaces are implemented
    by

    the same class.You are free to do the same thing if you have  a unified store
    for both

    types of data.'
  syntax:
    content: AbstractLeaseManager(lease_renew_interval, lease_duration)
  type: class
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.acquire_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: acquire_lease_async(lease)
  summary: 'Acquire the lease on the desired partition for this EventProcessorHost.

    Note that it is legal to acquire a lease that is already owned by another host.

    Lease-stealing is how partitions are redistributed when additional hosts are started.'
  syntax:
    content: acquire_lease_async(lease)
    parameters:
    - description: The lease to be acquired.
      id: lease
      type:
      - azure.eventprocessorhost.lease.Lease
    return:
      description: '*True* if the lease was acquired successfully, *False* if not.'
      type:
      - bool
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.acquire_lease_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_if_not_exists_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: create_lease_if_not_exists_async(partition_id)
  summary: 'Create in the store the lease info for the given partition, if it does
    not exist.

    Do nothing if it does exist in the store already.'
  syntax:
    content: create_lease_if_not_exists_async(partition_id)
    parameters:
    - description: The ID of a given partition.
      id: partition_id
    return:
      description: The existing or newly-created lease info for the partition.
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_if_not_exists_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_store_if_not_exists_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: create_lease_store_if_not_exists_async()
  summary: Create the lease store if it does not exist, do nothing if it does exist.
  syntax:
    content: create_lease_store_if_not_exists_async()
    parameters: []
    return:
      description: '*True* if the lease store already exists or was created successfully,
        *False* if not.'
      type:
      - bool
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_store_if_not_exists_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: delete_lease_async(lease)
  summary: 'Delete the lease info for the given partition from the store.

    If there is no stored lease for the given partition, that is treated as success.'
  syntax:
    content: delete_lease_async(lease)
    parameters:
    - description: The lease to be deleted.
      id: lease
      type:
      - azure.eventprocessorhost.lease.Lease
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_store_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: delete_lease_store_async()
  summary: Not used by EventProcessorHost, but a convenient function to have for testing.
  syntax:
    content: delete_lease_store_async()
    parameters: []
    return:
      description: '*True* if the lease store was deleted successfully, *False* if
        not.'
      type:
      - bool
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_store_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_all_leases
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: get_all_leases()
  summary: 'Return the lease info for all partitions.

    A typical implementation could just call get_lease_async() on all partitions.'
  syntax:
    content: get_all_leases()
    parameters: []
    return:
      description: A list of lease info.
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_all_leases
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: get_lease_async(partition_id)
  summary: 'Return the lease info for the specified partition.

    Can return null if no lease has been created in the store for the specified partition.'
  syntax:
    content: get_lease_async(partition_id)
    parameters:
    - description: The ID of a given partition.
      id: partition_id
    return:
      description: Lease info for the partition, or *None*.
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_lease_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.release_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: release_lease_async(lease)
  summary: 'Give up a lease currently held by this host. If the lease has been stolen,
    or expired,

    releasing it is unnecessary, and will fail if attempted.'
  syntax:
    content: release_lease_async(lease)
    parameters:
    - description: The lease to be released.
      id: lease
      type:
      - azure.eventprocessorhost.lease.Lease
    return:
      description: '*True* if the lease was released successfully, *False* if not.'
      type:
      - bool
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.release_lease_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.renew_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: renew_lease_async(lease)
  summary: 'Renew a lease currently held by this host.

    If the lease has been stolen, or expired, or released, it is not possible to renew
    it.

    You will have to call get_lease_async() and then acquire_lease_async() again.'
  syntax:
    content: renew_lease_async(lease)
    parameters:
    - description: The lease to be renewed.
      id: lease
      type:
      - azure.eventprocessorhost.lease.Lease
    return:
      description: '*True* if the lease was renewed successfully, *False* if not.'
      type:
      - bool
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.renew_lease_async
- class: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.update_lease_async
  langs:
  - python
  module: azure.eventprocessorhost.abstract_lease_manager
  name: update_lease_async(lease)
  summary: 'Update the store with the information in the provided lease. It is necessary
    to currently

    hold a lease in order to update it. If the lease has been stolen, or expired,
    or released,

    it cannot be updated. Updating should renew the lease before performing the update
    to

    avoid lease expiration during the process.'
  syntax:
    content: update_lease_async(lease)
    parameters:
    - description: The lease to be updated.
      id: lease
      type:
      - azure.eventprocessorhost.lease.Lease
    return:
      description: '*True* if the updated was performed successfully, *False* if not.'
      type:
      - bool
  type: method
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.update_lease_async
references:
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.acquire_lease_async
  isExternal: false
  name: acquire_lease_async(lease)
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.acquire_lease_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_if_not_exists_async
  isExternal: false
  name: create_lease_if_not_exists_async(partition_id)
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_if_not_exists_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_store_if_not_exists_async
  isExternal: false
  name: create_lease_store_if_not_exists_async()
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.create_lease_store_if_not_exists_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_async
  isExternal: false
  name: delete_lease_async(lease)
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_store_async
  isExternal: false
  name: delete_lease_store_async()
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.delete_lease_store_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_all_leases
  isExternal: false
  name: get_all_leases()
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_all_leases
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_lease_async
  isExternal: false
  name: get_lease_async(partition_id)
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.get_lease_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.release_lease_async
  isExternal: false
  name: release_lease_async(lease)
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.release_lease_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.renew_lease_async
  isExternal: false
  name: renew_lease_async(lease)
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.renew_lease_async
- fullName: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.update_lease_async
  isExternal: false
  name: update_lease_async(lease)
  parent: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager
  uid: azure.eventprocessorhost.abstract_lease_manager.AbstractLeaseManager.update_lease_async
