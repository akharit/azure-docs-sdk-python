### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.eventhub.consumer.EventHubConsumer.close
  - azure.eventhub.consumer.EventHubConsumer.next
  - azure.eventhub.consumer.EventHubConsumer.queue_size
  - azure.eventhub.consumer.EventHubConsumer.receive
  - azure.eventhub.consumer.EventHubConsumer.timeout
  class: azure.eventhub.consumer.EventHubConsumer
  fullName: azure.eventhub.consumer.EventHubConsumer
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.eventhub.consumer
  name: EventHubConsumer
  summary: "A consumer responsible for reading EventData from a specific Event Hub\n\
    \   partition and as a member of a specific consumer group.\n\nA consumer may\
    \ be exclusive, which asserts ownership over the partition for the consumer\n\
    \   group to ensure that only one consumer from that group is reading the from\
    \ the partition.\n   These exclusive consumers are sometimes referred to as \"\
    Epoch Consumers.\"\n\nA consumer may also be non-exclusive, allowing multiple\
    \ consumers from the same consumer\n   group to be actively reading events from\
    \ the partition.  These non-exclusive consumers are\n   sometimes referred to\
    \ as \"Non-Epoch Consumers.\""
  syntax:
    content: EventHubConsumer(client, source, event_position=None, prefetch=300, owner_level=None,
      keep_alive=None, auto_reconnect=True)
  type: class
  uid: azure.eventhub.consumer.EventHubConsumer
- class: azure.eventhub.consumer.EventHubConsumer
  fullName: azure.eventhub.consumer.EventHubConsumer.close
  langs:
  - python
  module: azure.eventhub.consumer
  name: close(exception=None)
  summary: 'Close down the handler. If the handler has already closed,

    this will be a no op. An optional exception can be passed in to

    indicate that the handler was shutdown due to error.'
  syntax:
    content: close(exception=None)
    parameters:
    - defaultValue: None
      description: 'An optional exception if the handler is closing

        due to an error.'
      id: exception
      type:
      - Exception
  type: method
  uid: azure.eventhub.consumer.EventHubConsumer.close
- class: azure.eventhub.consumer.EventHubConsumer
  fullName: azure.eventhub.consumer.EventHubConsumer.next
  langs:
  - python
  module: azure.eventhub.consumer
  name: next()
  syntax:
    content: next()
    parameters: []
  type: method
  uid: azure.eventhub.consumer.EventHubConsumer.next
- class: azure.eventhub.consumer.EventHubConsumer
  fullName: azure.eventhub.consumer.EventHubConsumer.queue_size
  langs:
  - python
  module: azure.eventhub.consumer
  name: queue_size
  summary: The current size of the unprocessed Event queue.
  syntax:
    return:
      type:
      - int
  type: attribute
  uid: azure.eventhub.consumer.EventHubConsumer.queue_size
- class: azure.eventhub.consumer.EventHubConsumer
  fullName: azure.eventhub.consumer.EventHubConsumer.receive
  langs:
  - python
  module: azure.eventhub.consumer
  name: receive(max_batch_size=None, timeout=None)
  summary: Receive events from the EventHub.
  syntax:
    content: receive(max_batch_size=None, timeout=None)
    parameters:
    - defaultValue: None
      description: 'Receive a batch of events. Batch size will

        be up to the maximum specified, but will return as soon as service

        returns no new events. If combined with a timeout and no events are

        retrieve before the time, the result will be empty. If no batch

        size is supplied, the prefetch size will be the maximum.'
      id: max_batch_size
      type:
      - int
    - defaultValue: None
      description: 'The maximum wait time to build up the requested message count
        for the batch.

        If not specified, the default wait time specified when the consumer was created
        will be used.'
      id: timeout
      type:
      - float
    return:
      type:
      - list[azure.eventhub.common.EventData]
  type: method
  uid: azure.eventhub.consumer.EventHubConsumer.receive
- class: azure.eventhub.consumer.EventHubConsumer
  fullName: azure.eventhub.consumer.EventHubConsumer.timeout
  langs:
  - python
  module: azure.eventhub.consumer
  name: timeout
  syntax:
    content: timeout = 0
  type: attribute
  uid: azure.eventhub.consumer.EventHubConsumer.timeout
references:
- fullName: azure.eventhub.consumer.EventHubConsumer.close
  isExternal: false
  name: close(exception=None)
  parent: azure.eventhub.consumer.EventHubConsumer
  uid: azure.eventhub.consumer.EventHubConsumer.close
- fullName: azure.eventhub.consumer.EventHubConsumer.next
  isExternal: false
  name: next()
  parent: azure.eventhub.consumer.EventHubConsumer
  uid: azure.eventhub.consumer.EventHubConsumer.next
- fullName: azure.eventhub.consumer.EventHubConsumer.queue_size
  isExternal: false
  name: queue_size
  parent: azure.eventhub.consumer.EventHubConsumer
  uid: azure.eventhub.consumer.EventHubConsumer.queue_size
- fullName: azure.eventhub.consumer.EventHubConsumer.receive
  isExternal: false
  name: receive(max_batch_size=None, timeout=None)
  parent: azure.eventhub.consumer.EventHubConsumer
  uid: azure.eventhub.consumer.EventHubConsumer.receive
- fullName: azure.eventhub.consumer.EventHubConsumer.timeout
  isExternal: false
  name: timeout
  parent: azure.eventhub.consumer.EventHubConsumer
  uid: azure.eventhub.consumer.EventHubConsumer.timeout
- fullName: list[azure.eventhub.common.EventData]
  name: list[EventData]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: azure.eventhub.common.EventData
    name: EventData
    uid: azure.eventhub.common.EventData
  - fullName: ']'
    name: ']'
  uid: list[azure.eventhub.common.EventData]
