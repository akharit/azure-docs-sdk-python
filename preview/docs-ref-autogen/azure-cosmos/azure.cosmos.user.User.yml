### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cosmos.user.User.create_permission
  - azure.cosmos.user.User.delete_permission
  - azure.cosmos.user.User.get_permission
  - azure.cosmos.user.User.query_permissions
  - azure.cosmos.user.User.read
  - azure.cosmos.user.User.read_all_permissions
  - azure.cosmos.user.User.replace_permission
  - azure.cosmos.user.User.upsert_permission
  class: azure.cosmos.user.User
  fullName: azure.cosmos.user.User
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cosmos.user
  name: User
  summary: ''
  syntax:
    content: User(client_connection, id, database_link, properties=None)
  type: class
  uid: azure.cosmos.user.User
- class: azure.cosmos.user.User
  exceptions:
  - description: If the given permission couldn't be created.
    type: HTTPFailure
  fullName: azure.cosmos.user.User.create_permission
  langs:
  - python
  module: azure.cosmos.user
  name: create_permission(body, request_options=None, response_hook=None)
  summary: 'Create a permission for the user.


    To update or replace an existing permision, use the <xref:User.upsert_permission>
    method.'
  syntax:
    content: create_permission(body, request_options=None, response_hook=None)
    parameters:
    - description: A dict-like object representing the permission to create.
      id: body
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the new permission.
  type: method
  uid: azure.cosmos.user.User.create_permission
- class: azure.cosmos.user.User
  exceptions:
  - description: The permission wasn't deleted successfully. If the permission does
      not exist for the user, a *404* error is returned.
    type: HTTPFailure
  fullName: azure.cosmos.user.User.delete_permission
  langs:
  - python
  module: azure.cosmos.user
  name: delete_permission(permission, request_options=None, response_hook=None)
  summary: Delete the specified permission from the user.
  syntax:
    content: delete_permission(permission, request_options=None, response_hook=None)
    parameters:
    - description: The ID (name), dict representing the properties or <xref:azure.cosmos.user.Permission>
        instance of the permission to be replaced.
      id: permission
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
  type: method
  uid: azure.cosmos.user.User.delete_permission
- class: azure.cosmos.user.User
  exceptions:
  - description: If the given permission couldn't be retrieved.
    type: HTTPFailure
  fullName: azure.cosmos.user.User.get_permission
  langs:
  - python
  module: azure.cosmos.user
  name: get_permission(permission, request_options=None, response_hook=None)
  summary: Get the permission identified by *id*.
  syntax:
    content: get_permission(permission, request_options=None, response_hook=None)
    parameters:
    - description: The ID (name), dict representing the properties or <xref:azure.cosmos.user.Permission>
        instance of the permission to be retrieved.
      id: permission
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the retrieved permission.
  type: method
  uid: azure.cosmos.user.User.get_permission
- class: azure.cosmos.user.User
  fullName: azure.cosmos.user.User.query_permissions
  langs:
  - python
  module: azure.cosmos.user
  name: query_permissions(query, parameters=None, max_item_count=None, feed_options=None,
    response_hook=None)
  summary: Return all permissions matching the given *query*.
  syntax:
    content: query_permissions(query, parameters=None, max_item_count=None, feed_options=None,
      response_hook=None)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
    - defaultValue: None
      description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - defaultValue: None
      description: Max number of permissions to be returned in the enumeration operation.
      id: max_item_count
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: feed_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A <xref:azure.cosmos.user.QueryIterable> instance representing
        an iterable of permissions (dicts).
  type: method
  uid: azure.cosmos.user.User.query_permissions
- class: azure.cosmos.user.User
  exceptions:
  - description: If the given user couldn't be retrieved.
    type: HTTPFailure
  fullName: azure.cosmos.user.User.read
  langs:
  - python
  module: azure.cosmos.user
  name: read(request_options=None, response_hook=None)
  summary: Read user propertes.
  syntax:
    content: read(request_options=None, response_hook=None)
    parameters:
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A <xref:azure.cosmos.user.User> instance representing the retrieved
        user.
  type: method
  uid: azure.cosmos.user.User.read
- class: azure.cosmos.user.User
  fullName: azure.cosmos.user.User.read_all_permissions
  langs:
  - python
  module: azure.cosmos.user
  name: read_all_permissions(max_item_count=None, feed_options=None, response_hook=None)
  summary: List all permission for the user.
  syntax:
    content: read_all_permissions(max_item_count=None, feed_options=None, response_hook=None)
    parameters:
    - defaultValue: None
      description: Max number of permissions to be returned in the enumeration operation.
      id: max_item_count
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: feed_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A <xref:azure.cosmos.user.QueryIterable> instance representing
        an iterable of permissions (dicts).
  type: method
  uid: azure.cosmos.user.User.read_all_permissions
- class: azure.cosmos.user.User
  exceptions:
  - description: If the replace failed or the permission with given id does not exist.
    type: HTTPFailure
  fullName: azure.cosmos.user.User.replace_permission
  langs:
  - python
  module: azure.cosmos.user
  name: replace_permission(permission, body, request_options=None, response_hook=None)
  summary: Replaces the specified permission if it exists for the user.
  syntax:
    content: replace_permission(permission, body, request_options=None, response_hook=None)
    parameters:
    - description: The ID (name), dict representing the properties or <xref:azure.cosmos.user.Permission>
        instance of the permission to be replaced.
      id: permission
    - description: A dict-like object representing the permission to replace.
      id: body
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the permission after replace went through.
  type: method
  uid: azure.cosmos.user.User.replace_permission
- class: azure.cosmos.user.User
  exceptions:
  - description: If the given permission could not be upserted.
    type: HTTPFailure
  fullName: azure.cosmos.user.User.upsert_permission
  langs:
  - python
  module: azure.cosmos.user
  name: upsert_permission(body, request_options=None, response_hook=None)
  summary: 'Insert or update the specified permission.


    If the permission already exists in the container, it is replaced. If it does
    not, it is inserted.'
  syntax:
    content: upsert_permission(body, request_options=None, response_hook=None)
    parameters:
    - description: A dict-like object representing the permission to update or insert.
      id: body
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the upserted permission.
  type: method
  uid: azure.cosmos.user.User.upsert_permission
references:
- fullName: azure.cosmos.user.User.create_permission
  isExternal: false
  name: create_permission(body, request_options=None, response_hook=None)
  parent: azure.cosmos.user.User
  uid: azure.cosmos.user.User.create_permission
- fullName: azure.cosmos.user.User.delete_permission
  isExternal: false
  name: delete_permission(permission, request_options=None, response_hook=None)
  parent: azure.cosmos.user.User
  uid: azure.cosmos.user.User.delete_permission
- fullName: azure.cosmos.user.User.get_permission
  isExternal: false
  name: get_permission(permission, request_options=None, response_hook=None)
  parent: azure.cosmos.user.User
  uid: azure.cosmos.user.User.get_permission
- fullName: azure.cosmos.user.User.query_permissions
  isExternal: false
  name: query_permissions(query, parameters=None, max_item_count=None, feed_options=None,
    response_hook=None)
  parent: azure.cosmos.user.User
  uid: azure.cosmos.user.User.query_permissions
- fullName: azure.cosmos.user.User.read
  isExternal: false
  name: read(request_options=None, response_hook=None)
  parent: azure.cosmos.user.User
  uid: azure.cosmos.user.User.read
- fullName: azure.cosmos.user.User.read_all_permissions
  isExternal: false
  name: read_all_permissions(max_item_count=None, feed_options=None, response_hook=None)
  parent: azure.cosmos.user.User
  uid: azure.cosmos.user.User.read_all_permissions
- fullName: azure.cosmos.user.User.replace_permission
  isExternal: false
  name: replace_permission(permission, body, request_options=None, response_hook=None)
  parent: azure.cosmos.user.User
  uid: azure.cosmos.user.User.replace_permission
- fullName: azure.cosmos.user.User.upsert_permission
  isExternal: false
  name: upsert_permission(body, request_options=None, response_hook=None)
  parent: azure.cosmos.user.User
  uid: azure.cosmos.user.User.upsert_permission
