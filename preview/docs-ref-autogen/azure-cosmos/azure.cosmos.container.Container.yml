### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.cosmos.container.Container.create_item
  - azure.cosmos.container.Container.delete_conflict
  - azure.cosmos.container.Container.delete_item
  - azure.cosmos.container.Container.get_conflict
  - azure.cosmos.container.Container.query_conflicts
  - azure.cosmos.container.Container.query_items
  - azure.cosmos.container.Container.query_items_change_feed
  - azure.cosmos.container.Container.read
  - azure.cosmos.container.Container.read_all_conflicts
  - azure.cosmos.container.Container.read_all_items
  - azure.cosmos.container.Container.read_item
  - azure.cosmos.container.Container.read_offer
  - azure.cosmos.container.Container.replace_item
  - azure.cosmos.container.Container.replace_throughput
  - azure.cosmos.container.Container.upsert_item
  class: azure.cosmos.container.Container
  fullName: azure.cosmos.container.Container
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.cosmos.container
  name: Container
  summary: 'An Azure Cosmos DB container.


    A container in an Azure Cosmos DB SQL API database is a collection of documents,
    each of which represented as an Item.



    > [!NOTE]

    > To create a new container in an existing database, use <xref:Database.create_container>.

    >'
  syntax:
    content: Container(client_connection, database_link, id, properties=None)
    variables:
    - description: ID (name) of the container
      id: id
      type:
      - str
    - description: The session token for the container.
      id: session_token
      type:
      - str
  type: class
  uid: azure.cosmos.container.Container
- class: azure.cosmos.container.Container
  exceptions:
  - description: If item with the given ID already exists.
    type: HTTPFailure
  fullName: azure.cosmos.container.Container.create_item
  langs:
  - python
  module: azure.cosmos.container
  name: create_item(body, session_token=None, initial_headers=None, access_condition=None,
    populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    indexing_directive=None, request_options=None, response_hook=None)
  summary: 'Create an item in the container.


    To update or replace an existing item, use the <xref:Container.upsert_item> method.'
  syntax:
    content: create_item(body, session_token=None, initial_headers=None, access_condition=None,
      populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
      indexing_directive=None, request_options=None, response_hook=None)
    parameters:
    - description: A dict-like object representing the item to create.
      id: body
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Conditions Associated with the request.
      id: access_condition
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
    - defaultValue: None
      description: trigger id to be used as post operation trigger.
      id: post_trigger_include
    - defaultValue: None
      description: Indicate whether the document should be omitted from indexing.
      id: indexing_directive
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the new item.
  type: method
  uid: azure.cosmos.container.Container.create_item
- class: azure.cosmos.container.Container
  exceptions:
  - description: The conflict wasn't deleted successfully. If the conflict does not
      exist in the container, a *404* error is returned.
    type: HTTPFailure
  fullName: azure.cosmos.container.Container.delete_conflict
  langs:
  - python
  module: azure.cosmos.container
  name: delete_conflict(conflict, partition_key, request_options=None, response_hook=None)
  summary: Delete the specified conflict from the container.
  syntax:
    content: delete_conflict(conflict, partition_key, request_options=None, response_hook=None)
    parameters:
    - description: The ID (name) or dict representing the conflict to be deleted.
      id: conflict
    - description: Partition key for the conflict to delete.
      id: partition_key
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
  type: method
  uid: azure.cosmos.container.Container.delete_conflict
- class: azure.cosmos.container.Container
  exceptions:
  - description: The item wasn't deleted successfully. If the item does not exist
      in the container, a *404* error is returned.
    type: HTTPFailure
  fullName: azure.cosmos.container.Container.delete_item
  langs:
  - python
  module: azure.cosmos.container
  name: delete_item(item, partition_key, session_token=None, initial_headers=None,
    access_condition=None, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, request_options=None, response_hook=None)
  summary: Delete the specified item from the container.
  syntax:
    content: delete_item(item, partition_key, session_token=None, initial_headers=None,
      access_condition=None, populate_query_metrics=None, pre_trigger_include=None,
      post_trigger_include=None, request_options=None, response_hook=None)
    parameters:
    - description: The ID (name) or dict representing item to be deleted.
      id: item
    - description: Specifies the partition key value for the item.
      id: partition_key
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Conditions Associated with the request.
      id: access_condition
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
    - defaultValue: None
      description: trigger id to be used as post operation trigger.
      id: post_trigger_include
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
  type: method
  uid: azure.cosmos.container.Container.delete_item
- class: azure.cosmos.container.Container
  exceptions:
  - description: If the given conflict couldn't be retrieved.
    type: HTTPFailure
  fullName: azure.cosmos.container.Container.get_conflict
  langs:
  - python
  module: azure.cosmos.container
  name: get_conflict(conflict, partition_key, request_options=None, response_hook=None)
  summary: Get the conflict identified by *id*.
  syntax:
    content: get_conflict(conflict, partition_key, request_options=None, response_hook=None)
    parameters:
    - description: The ID (name) or dict representing the conflict to retrieve.
      id: conflict
    - description: Partition key for the conflict to retrieve.
      id: partition_key
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the retrieved conflict.
  type: method
  uid: azure.cosmos.container.Container.get_conflict
- class: azure.cosmos.container.Container
  fullName: azure.cosmos.container.Container.query_conflicts
  langs:
  - python
  module: azure.cosmos.container
  name: query_conflicts(query, parameters=None, enable_cross_partition_query=None,
    partition_key=None, max_item_count=None, feed_options=None, response_hook=None)
  summary: 'Return all conflicts matching the given *query*.



    More than one request is necessary if the query is not scoped to single partition
    key value.

    :param max_item_count: Max number of items to be returned in the enumeration operation.

    :param feed_options: Dictionary of additional properties to be used for the request.

    :param response_hook: a callable invoked with the response metadata

    :returns: A <xref:azure.cosmos.container.QueryIterable> instance representing
    an iterable of conflicts (dicts).'
  syntax:
    content: query_conflicts(query, parameters=None, enable_cross_partition_query=None,
      partition_key=None, max_item_count=None, feed_options=None, response_hook=None)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
    - defaultValue: None
      description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - defaultValue: None
      description: Specifies the partition key value for the item.
      id: partition_key
    - defaultValue: None
      description: Allows sending of more than one request to execute the query in
        the Azure Cosmos DB service.
      id: enable_cross_partition_query
    - defaultValue: None
      id: max_item_count
    - defaultValue: None
      id: feed_options
    - defaultValue: None
      id: response_hook
  type: method
  uid: azure.cosmos.container.Container.query_conflicts
- class: azure.cosmos.container.Container
  fullName: azure.cosmos.container.Container.query_items
  langs:
  - python
  module: azure.cosmos.container
  name: query_items(query, parameters=None, partition_key=None, enable_cross_partition_query=None,
    max_item_count=None, session_token=None, initial_headers=None, enable_scan_in_query=None,
    populate_query_metrics=None, feed_options=None, response_hook=None)
  summary: 'Return all results matching the given *query*.



    More than one request is necessary if the query is not scoped to single partition
    key value.

    :param max_item_count: Max number of items to be returned in the enumeration operation.

    :param session_token: Token for use with Session consistency.

    :param initial_headers: Initial headers to be sent as part of the request.

    :param enable_scan_in_query: Allow scan on the queries which couldn''t be served
    as indexing was opted out on the requested paths.

    :param populate_query_metrics: Enable returning query metrics in response headers.

    :param feed_options: Dictionary of additional properties to be used for the request.

    :param response_hook: a callable invoked with the response metadata

    :returns: A <xref:azure.cosmos.container.QueryIterable> instance representing
    an iterable of items (dicts).


    You can use any value for the container name in the FROM clause, but typically
    the container name is used.

    In the examples below, the container name is "products," and is aliased as "p"
    for easier referencing

    in the WHERE clause.'
  syntax:
    content: query_items(query, parameters=None, partition_key=None, enable_cross_partition_query=None,
      max_item_count=None, session_token=None, initial_headers=None, enable_scan_in_query=None,
      populate_query_metrics=None, feed_options=None, response_hook=None)
    parameters:
    - description: The Azure Cosmos DB SQL query to execute.
      id: query
    - defaultValue: None
      description: Optional array of parameters to the query. Ignored if no query
        is provided.
      id: parameters
    - defaultValue: None
      description: Specifies the partition key value for the item.
      id: partition_key
    - defaultValue: None
      description: Allows sending of more than one request to execute the query in
        the Azure Cosmos DB service.
      id: enable_cross_partition_query
    - defaultValue: None
      id: max_item_count
    - defaultValue: None
      id: session_token
    - defaultValue: None
      id: initial_headers
    - defaultValue: None
      id: enable_scan_in_query
    - defaultValue: None
      id: populate_query_metrics
    - defaultValue: None
      id: feed_options
    - defaultValue: None
      id: response_hook
  type: method
  uid: azure.cosmos.container.Container.query_items
- class: azure.cosmos.container.Container
  fullName: azure.cosmos.container.Container.query_items_change_feed
  langs:
  - python
  module: azure.cosmos.container
  name: query_items_change_feed(partition_key_range_id=None, is_start_from_beginning=False,
    continuation=None, max_item_count=None, feed_options=None, response_hook=None)
  summary: 'Get a sorted list of items that were changed, in the order in which they
    were modified.



    This is used to process the change feed in parallel across multiple consumers.

    :param is_start_from_beginning: Get whether change feed should start from beginning
    (true) or from current (false).

    By default it''s start from current (false).

    :param continuation: e_tag value to be used as continuation for reading change
    feed.

    :param max_item_count: Max number of items to be returned in the enumeration operation.

    :param feed_options: Dictionary of additional properties to be used for the request.

    :param response_hook: a callable invoked with the response metadata

    :returns: A <xref:azure.cosmos.container.QueryIterable> instance representing
    an iterable of items (dicts).'
  syntax:
    content: query_items_change_feed(partition_key_range_id=None, is_start_from_beginning=False,
      continuation=None, max_item_count=None, feed_options=None, response_hook=None)
    parameters:
    - defaultValue: None
      description: ChangeFeed requests can be executed against specific partition
        key ranges.
      id: partition_key_range_id
    - defaultValue: 'False'
      id: is_start_from_beginning
    - defaultValue: None
      id: continuation
    - defaultValue: None
      id: max_item_count
    - defaultValue: None
      id: feed_options
    - defaultValue: None
      id: response_hook
  type: method
  uid: azure.cosmos.container.Container.query_items_change_feed
- class: azure.cosmos.container.Container
  exceptions:
  - description: Raised if the container couldn't be retrieved. This includes if the
      container does not exist.
    type: HTTPFailure
  fullName: azure.cosmos.container.Container.read
  langs:
  - python
  module: azure.cosmos.container
  name: read(session_token=None, initial_headers=None, populate_query_metrics=None,
    populate_partition_key_range_statistics=None, populate_quota_info=None, request_options=None,
    response_hook=None)
  summary: Read the container properties
  syntax:
    content: read(session_token=None, initial_headers=None, populate_query_metrics=None,
      populate_partition_key_range_statistics=None, populate_quota_info=None, request_options=None,
      response_hook=None)
    parameters:
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: Enable returning partition key range statistics in response headers.
      id: populate_partition_key_range_statistics
    - defaultValue: None
      description: Enable returning collection storage quota information in response
        headers.
      id: populate_quota_info
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: <xref:azure.cosmos.container.Container> instance representing the
        retrieved container.
  type: method
  uid: azure.cosmos.container.Container.read
- class: azure.cosmos.container.Container
  fullName: azure.cosmos.container.Container.read_all_conflicts
  langs:
  - python
  module: azure.cosmos.container
  name: read_all_conflicts(max_item_count=None, feed_options=None, response_hook=None)
  summary: List all conflicts in the container.
  syntax:
    content: read_all_conflicts(max_item_count=None, feed_options=None, response_hook=None)
    parameters:
    - defaultValue: None
      description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: feed_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A <xref:azure.cosmos.container.QueryIterable> instance representing
        an iterable of conflicts (dicts).
  type: method
  uid: azure.cosmos.container.Container.read_all_conflicts
- class: azure.cosmos.container.Container
  fullName: azure.cosmos.container.Container.read_all_items
  langs:
  - python
  module: azure.cosmos.container
  name: read_all_items(max_item_count=None, session_token=None, initial_headers=None,
    populate_query_metrics=None, feed_options=None, response_hook=None)
  summary: List all items in the container.
  syntax:
    content: read_all_items(max_item_count=None, session_token=None, initial_headers=None,
      populate_query_metrics=None, feed_options=None, response_hook=None)
    parameters:
    - defaultValue: None
      description: Max number of items to be returned in the enumeration operation.
      id: max_item_count
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: feed_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A <xref:azure.cosmos.container.QueryIterable> instance representing
        an iterable of items (dicts).
  type: method
  uid: azure.cosmos.container.Container.read_all_items
- class: azure.cosmos.container.Container
  exceptions:
  - description: If the given item couldn't be retrieved.
    type: HTTPFailure
  fullName: azure.cosmos.container.Container.read_item
  langs:
  - python
  module: azure.cosmos.container
  name: read_item(item, partition_key, session_token=None, initial_headers=None, populate_query_metrics=None,
    post_trigger_include=None, request_options=None, response_hook=None)
  summary: Get the item identified by *id*.
  syntax:
    content: read_item(item, partition_key, session_token=None, initial_headers=None,
      populate_query_metrics=None, post_trigger_include=None, request_options=None,
      response_hook=None)
    parameters:
    - description: The ID (name) or dict representing item to retrieve.
      id: item
    - description: Partition key for the item to retrieve.
      id: partition_key
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: trigger id to be used as post operation trigger.
      id: post_trigger_include
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: Dict representing the item to be retrieved.
  type: method
  uid: azure.cosmos.container.Container.read_item
- class: azure.cosmos.container.Container
  exceptions:
  - description: If no offer exists for the container or if the offer could not be
      retrieved.
    type: HTTPFailure
  fullName: azure.cosmos.container.Container.read_offer
  langs:
  - python
  module: azure.cosmos.container
  name: read_offer(response_hook=None)
  summary: Read the Offer object for this container.
  syntax:
    content: read_offer(response_hook=None)
    parameters:
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: Offer for the container.
  type: method
  uid: azure.cosmos.container.Container.read_offer
- class: azure.cosmos.container.Container
  exceptions:
  - description: If the replace failed or the item with given id does not exist.
    type: HTTPFailure
  fullName: azure.cosmos.container.Container.replace_item
  langs:
  - python
  module: azure.cosmos.container
  name: replace_item(item, body, session_token=None, initial_headers=None, access_condition=None,
    populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    request_options=None, response_hook=None)
  summary: Replaces the specified item if it exists in the container.
  syntax:
    content: replace_item(item, body, session_token=None, initial_headers=None, access_condition=None,
      populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
      request_options=None, response_hook=None)
    parameters:
    - description: The ID (name) or dict representing item to be replaced.
      id: item
    - description: A dict-like object representing the item to replace.
      id: body
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Conditions Associated with the request.
      id: access_condition
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
    - defaultValue: None
      description: trigger id to be used as post operation trigger.
      id: post_trigger_include
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the item after replace went through.
  type: method
  uid: azure.cosmos.container.Container.replace_item
- class: azure.cosmos.container.Container
  exceptions:
  - description: If no offer exists for the container or if the offer could not be
      updated.
    type: HTTPFailure
  fullName: azure.cosmos.container.Container.replace_throughput
  langs:
  - python
  module: azure.cosmos.container
  name: replace_throughput(throughput, response_hook=None)
  summary: Replace the container's throughput
  syntax:
    content: replace_throughput(throughput, response_hook=None)
    parameters:
    - description: The throughput to be set (an integer).
      id: throughput
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: Offer for the container, updated with new throughput.
  type: method
  uid: azure.cosmos.container.Container.replace_throughput
- class: azure.cosmos.container.Container
  exceptions:
  - description: If the given item could not be upserted.
    type: HTTPFailure
  fullName: azure.cosmos.container.Container.upsert_item
  langs:
  - python
  module: azure.cosmos.container
  name: upsert_item(body, session_token=None, initial_headers=None, access_condition=None,
    populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    request_options=None, response_hook=None)
  summary: 'Insert or update the specified item.


    If the item already exists in the container, it is replaced. If it does not, it
    is inserted.'
  syntax:
    content: upsert_item(body, session_token=None, initial_headers=None, access_condition=None,
      populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
      request_options=None, response_hook=None)
    parameters:
    - description: A dict-like object representing the item to update or insert.
      id: body
    - defaultValue: None
      description: Token for use with Session consistency.
      id: session_token
    - defaultValue: None
      description: Initial headers to be sent as part of the request.
      id: initial_headers
    - defaultValue: None
      description: Conditions Associated with the request.
      id: access_condition
    - defaultValue: None
      description: Enable returning query metrics in response headers.
      id: populate_query_metrics
    - defaultValue: None
      description: trigger id to be used as pre operation trigger.
      id: pre_trigger_include
    - defaultValue: None
      description: trigger id to be used as post operation trigger.
      id: post_trigger_include
    - defaultValue: None
      description: Dictionary of additional properties to be used for the request.
      id: request_options
    - defaultValue: None
      description: a callable invoked with the response metadata
      id: response_hook
    return:
      description: A dict representing the upserted item.
  type: method
  uid: azure.cosmos.container.Container.upsert_item
references:
- fullName: azure.cosmos.container.Container.create_item
  isExternal: false
  name: create_item(body, session_token=None, initial_headers=None, access_condition=None,
    populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    indexing_directive=None, request_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.create_item
- fullName: azure.cosmos.container.Container.delete_conflict
  isExternal: false
  name: delete_conflict(conflict, partition_key, request_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.delete_conflict
- fullName: azure.cosmos.container.Container.delete_item
  isExternal: false
  name: delete_item(item, partition_key, session_token=None, initial_headers=None,
    access_condition=None, populate_query_metrics=None, pre_trigger_include=None,
    post_trigger_include=None, request_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.delete_item
- fullName: azure.cosmos.container.Container.get_conflict
  isExternal: false
  name: get_conflict(conflict, partition_key, request_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.get_conflict
- fullName: azure.cosmos.container.Container.query_conflicts
  isExternal: false
  name: query_conflicts(query, parameters=None, enable_cross_partition_query=None,
    partition_key=None, max_item_count=None, feed_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.query_conflicts
- fullName: azure.cosmos.container.Container.query_items
  isExternal: false
  name: query_items(query, parameters=None, partition_key=None, enable_cross_partition_query=None,
    max_item_count=None, session_token=None, initial_headers=None, enable_scan_in_query=None,
    populate_query_metrics=None, feed_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.query_items
- fullName: azure.cosmos.container.Container.query_items_change_feed
  isExternal: false
  name: query_items_change_feed(partition_key_range_id=None, is_start_from_beginning=False,
    continuation=None, max_item_count=None, feed_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.query_items_change_feed
- fullName: azure.cosmos.container.Container.read
  isExternal: false
  name: read(session_token=None, initial_headers=None, populate_query_metrics=None,
    populate_partition_key_range_statistics=None, populate_quota_info=None, request_options=None,
    response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.read
- fullName: azure.cosmos.container.Container.read_all_conflicts
  isExternal: false
  name: read_all_conflicts(max_item_count=None, feed_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.read_all_conflicts
- fullName: azure.cosmos.container.Container.read_all_items
  isExternal: false
  name: read_all_items(max_item_count=None, session_token=None, initial_headers=None,
    populate_query_metrics=None, feed_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.read_all_items
- fullName: azure.cosmos.container.Container.read_item
  isExternal: false
  name: read_item(item, partition_key, session_token=None, initial_headers=None, populate_query_metrics=None,
    post_trigger_include=None, request_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.read_item
- fullName: azure.cosmos.container.Container.read_offer
  isExternal: false
  name: read_offer(response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.read_offer
- fullName: azure.cosmos.container.Container.replace_item
  isExternal: false
  name: replace_item(item, body, session_token=None, initial_headers=None, access_condition=None,
    populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    request_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.replace_item
- fullName: azure.cosmos.container.Container.replace_throughput
  isExternal: false
  name: replace_throughput(throughput, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.replace_throughput
- fullName: azure.cosmos.container.Container.upsert_item
  isExternal: false
  name: upsert_item(body, session_token=None, initial_headers=None, access_condition=None,
    populate_query_metrics=None, pre_trigger_include=None, post_trigger_include=None,
    request_options=None, response_hook=None)
  parent: azure.cosmos.container.Container
  uid: azure.cosmos.container.Container.upsert_item
