### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.blob.container_client.ContainerClient.acquire_lease
  - azure.storage.blob.container_client.ContainerClient.create_container
  - azure.storage.blob.container_client.ContainerClient.delete_blob
  - azure.storage.blob.container_client.ContainerClient.delete_container
  - azure.storage.blob.container_client.ContainerClient.from_connection_string
  - azure.storage.blob.container_client.ContainerClient.generate_shared_access_signature
  - azure.storage.blob.container_client.ContainerClient.get_account_information
  - azure.storage.blob.container_client.ContainerClient.get_blob_client
  - azure.storage.blob.container_client.ContainerClient.get_container_access_policy
  - azure.storage.blob.container_client.ContainerClient.get_container_properties
  - azure.storage.blob.container_client.ContainerClient.list_blobs
  - azure.storage.blob.container_client.ContainerClient.set_container_access_policy
  - azure.storage.blob.container_client.ContainerClient.set_container_metadata
  - azure.storage.blob.container_client.ContainerClient.upload_blob
  - azure.storage.blob.container_client.ContainerClient.walk_blobs
  class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.blob._shared.utils.StorageAccountHostsMixin
  langs:
  - python
  module: azure.storage.blob.container_client
  name: ContainerClient
  summary: 'A client to interact with a specific container, although that container

    may not yet exist.


    For operations relating to a specific blob within this container, a blob client
    can be

    retrieved using the <xref:azure.storage.blob.container_client.ContainerClient.get_blob_client>
    function.'
  syntax:
    content: ContainerClient(container_url, container=None, credential=None, **kwargs)
    parameters:
    - description: 'The full URI to the container. This can also be a URL to the storage

        account, in which case the blob container must also be specified.'
      id: container_url
      type:
      - str
    - description: The container for the blob.
      id: container
      type:
      - str
      - azure.storage.blob.models.ContainerProperties
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string,
        and account

        shared access key, or an instance of a TokenCredentials class from azure.identity.

        If the URL already has a SAS token, specifying an explicit credential will
        take priority.'
      id: credential
    variables:
    - description: 'The full endpoint URL to the Container, including SAS token if
        used. This could be

        either the primary endpoint, or the secondard endpoint depending on the current
        *location_mode*.'
      id: url
      type:
      - str
    - description: The full primary endpoint URL.
      id: primary_endpoint
      type:
      - str
    - description: The hostname of the primary endpoint.
      id: primary_hostname
      type:
      - str
    - description: 'The full secondard endpoint URL if configured. If not available

        a ValueError will be raised. To explicitly specify a secondary hostname, use
        the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_endpoint
      type:
      - str
    - description: 'The hostname of the secondary endpoint. If not available this

        will be None. To explicitly specify a secondary hostname, use the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_hostname
      type:
      - str
    - description: 'The location mode that the client is currently using. By default

        this will be "primary". Options include "primary" and "secondary".'
      id: location_mode
      type:
      - str
  type: class
  uid: azure.storage.blob.container_client.ContainerClient
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.acquire_lease
  langs:
  - python
  module: azure.storage.blob.container_client
  name: acquire_lease(lease_duration=-1, lease_id=None, if_modified_since=None, if_unmodified_since=None,
    if_match=None, if_none_match=None, timeout=None, **kwargs)
  summary: 'Requests a new lease. If the container does not have an active lease,

    the Blob service creates a lease on the container and returns a new

    lease ID.'
  syntax:
    content: acquire_lease(lease_duration=-1, lease_id=None, if_modified_since=None,
      if_unmodified_since=None, if_match=None, if_none_match=None, timeout=None, **kwargs)
    parameters:
    - defaultValue: '-1'
      description: 'Specifies the duration of the lease, in seconds, or negative one

        (-1) for a lease that never expires. A non-infinite lease can be

        between 15 and 60 seconds. A lease duration cannot be changed

        using renew or change. Default is -1 (infinite lease).'
      id: lease_duration
      type:
      - int
    - defaultValue: None
      description: 'Proposed lease ID, in a GUID string format. The Blob service returns

        400 (Invalid request) if the proposed lease ID is not in the correct format.'
      id: lease_id
      type:
      - str
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header
        to perform

        the operation only if the resource''s ETag matches the value specified.'
      id: if_match
      type:
      - str
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.'
      id: if_none_match
      type:
      - str
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: A LeaseClient object, that can be run in a context manager.
      type:
      - azure.storage.blob.lease.LeaseClient
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.acquire_lease
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.create_container
  langs:
  - python
  module: azure.storage.blob.container_client
  name: create_container(metadata=None, public_access=None, timeout=None, **kwargs)
  summary: 'Creates a new container under the specified account. If the container

    with the same name already exists, the operation fails.'
  syntax:
    content: create_container(metadata=None, public_access=None, timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'A dict with name_value pairs to associate with the

        container as metadata. Example:{''Category'':''test''}'
      id: metadata
      type:
      - dict[str, str]
    - defaultValue: None
      description: 'Possible values include: container, blob.'
      id: public_access
      type:
      - azure.storage.blob.models.PublicAccess
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.create_container
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.delete_blob
  langs:
  - python
  module: azure.storage.blob.container_client
  name: delete_blob(blob, delete_snapshots=None, lease=None, if_modified_since=None,
    if_unmodified_since=None, if_match=None, if_none_match=None, timeout=None, **kwargs)
  summary: 'Marks the specified blob or snapshot for deletion.


    The blob is later deleted during garbage collection.

    Note that in order to delete a blob, you must delete all of its

    snapshots. You can delete both at the same time with the Delete

    Blob operation.


    If a delete retention policy is enabled for the service, then this operation soft
    deletes the blob or snapshot

    and retains the blob or snapshot for specified number of days.

    After specified number of days, blob''s data is removed from the service during
    garbage collection.

    Soft deleted blob or snapshot is accessible through List Blobs API specifying
    *include="deleted"* option.

    Soft-deleted blob or snapshot can be restored using Undelete API.'
  syntax:
    content: delete_blob(blob, delete_snapshots=None, lease=None, if_modified_since=None,
      if_unmodified_since=None, if_match=None, if_none_match=None, timeout=None, **kwargs)
    parameters:
    - description: 'The blob with which to interact. If specified, this value will
        override

        a blob value specified in the blob URL.'
      id: blob
      type:
      - str
      - azure.storage.blob.models.BlobProperties
    - defaultValue: None
      description: "Required if the blob has associated snapshots. Values include:\n\
        \   * \"only\": Deletes only the blobs snapshots. \n\n   * \"include\": Deletes\
        \ the blob along with all snapshots."
      id: delete_snapshots
      type:
      - str
    - defaultValue: None
      description: 'Required if the blob has an active lease. Value can be a Lease
        object

        or the lease ID as a string.'
      id: lease
      type:
      - azure.storage.blob.lease.LeaseClient
      - str
    - defaultValue: None
      description: "Required if the blob has associated snapshots. Values include:\n\
        \   * \"only\": Deletes only the blobs snapshots. \n\n   * \"include\": Deletes\
        \ the blob along with all snapshots."
      id: delete_snapshots
      type:
      - str
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header
        to perform

        the operation only if the resource''s ETag matches the value specified.'
      id: if_match
      type:
      - str
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.'
      id: if_none_match
      type:
      - str
    - description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.delete_blob
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.delete_container
  langs:
  - python
  module: azure.storage.blob.container_client
  name: delete_container(lease=None, if_modified_since=None, if_unmodified_since=None,
    if_match=None, if_none_match=None, timeout=None, **kwargs)
  summary: 'Marks the specified container for deletion. The container and any blobs

    contained within it are later deleted during garbage collection.'
  syntax:
    content: delete_container(lease=None, if_modified_since=None, if_unmodified_since=None,
      if_match=None, if_none_match=None, timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'If specified, delete_container only succeeds if the

        container''s lease is active and matches this ID.

        Required if the container has an active lease.'
      id: lease
      type:
      - azure.storage.blob.lease.LeaseClient
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header
        to perform

        the operation only if the resource''s ETag matches the value specified.'
      id: if_match
      type:
      - str
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.'
      id: if_none_match
      type:
      - str
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.delete_container
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.from_connection_string
  langs:
  - python
  module: azure.storage.blob.container_client
  name: from_connection_string(conn_str, container, credential=None, **kwargs)
  summary: Create ContainerClient from a Connection String.
  syntax:
    content: from_connection_string(conn_str, container, credential=None, **kwargs)
    parameters:
    - description: A connection string to an Azure Storage account.
      id: conn_str
      type:
      - str
    - description: The container for the blob.
      id: container
      type:
      - str
      - azure.storage.blob.models.ContainerProperties
    - description: 'The credentials with which to authenticate. This is optional if
        the

        account URL already has a SAS token, or the connection string already has
        shared

        access key values. The value can be a SAS token string, and account shared
        access

        key, or an instance of a TokenCredentials class from azure.identity.

        Credentials provided here will take precedence over those in the connection
        string.'
      id: credential
    - defaultValue: None
      id: credential
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.from_connection_string
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.generate_shared_access_signature
  langs:
  - python
  module: azure.storage.blob.container_client
  name: generate_shared_access_signature(permission=None, expiry=None, start=None,
    policy_id=None, ip=None, protocol=None, cache_control=None, content_disposition=None,
    content_encoding=None, content_language=None, content_type=None)
  summary: 'Generates a shared access signature for the container.

    Use the returned signature with the credential parameter of any BlobServiceClient,

    ContainerClient or BlobClient.'
  syntax:
    content: generate_shared_access_signature(permission=None, expiry=None, start=None,
      policy_id=None, ip=None, protocol=None, cache_control=None, content_disposition=None,
      content_encoding=None, content_language=None, content_type=None)
    parameters:
    - defaultValue: None
      description: 'The permissions associated with the shared access signature. The

        user is restricted to operations allowed by the permissions.

        Permissions must be ordered read, write, delete, list.

        Required unless an id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has been

        specified in an associated stored access policy.'
      id: permission
      type:
      - str
      - azure.storage.blob.models.ContainerPermissions
    - defaultValue: None
      description: 'The time at which the shared access signature becomes invalid.

        Required unless an id is given referencing a stored access policy

        which contains this field. This field must be omitted if it has

        been specified in an associated stored access policy. Azure will always

        convert values to UTC. If a date is passed in without timezone info, it

        is assumed to be UTC.'
      id: expiry
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'The time at which the shared access signature becomes valid. If

        omitted, start time for this call is assumed to be the time when the

        storage service receives the request. Azure will always convert values

        to UTC. If a date is passed in without timezone info, it is assumed to

        be UTC.'
      id: start
      type:
      - datetime
      - str
    - defaultValue: None
      description: 'A unique value up to 64 characters in length that correlates to
        a

        stored access policy. To create a stored access policy, use <xref:azure.storage.blob.container_client.set_container_access_policy>.'
      id: policy_id
      type:
      - str
    - defaultValue: None
      description: 'Specifies an IP address or a range of IP addresses from which
        to accept requests.

        If the IP address from which the request originates does not match the IP
        address

        or address range specified on the SAS token, the request is not authenticated.

        For example, specifying ip=168.1.5.65 or ip=168.1.5.60-168.1.5.70 on the SAS

        restricts the request to those IP addresses.'
      id: ip
      type:
      - str
    - defaultValue: None
      description: Specifies the protocol permitted for a request made. The default
        value is https.
      id: protocol
      type:
      - str
    - defaultValue: None
      description: 'Response header value for Cache-Control when resource is accessed

        using this shared access signature.'
      id: cache_control
      type:
      - str
    - defaultValue: None
      description: 'Response header value for Content-Disposition when resource is
        accessed

        using this shared access signature.'
      id: content_disposition
      type:
      - str
    - defaultValue: None
      description: 'Response header value for Content-Encoding when resource is accessed

        using this shared access signature.'
      id: content_encoding
      type:
      - str
    - defaultValue: None
      description: 'Response header value for Content-Language when resource is accessed

        using this shared access signature.'
      id: content_language
      type:
      - str
    - defaultValue: None
      description: 'Response header value for Content-Type when resource is accessed

        using this shared access signature.'
      id: content_type
      type:
      - str
    return:
      description: A Shared Access Signature (sas) token.
      type:
      - str
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.generate_shared_access_signature
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.get_account_information
  langs:
  - python
  module: azure.storage.blob.container_client
  name: get_account_information(**kwargs)
  summary: 'Gets information related to the storage account.


    The information can also be retrieved if the user has a SAS to a container or
    blob.

    The keys in the returned dictionary include ''sku_name'' and ''account_kind''.'
  syntax:
    content: get_account_information(**kwargs)
    parameters: []
    return:
      description: A dict of account information (SKU and account type).
      type:
      - dict(str, str)
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.get_account_information
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.get_blob_client
  langs:
  - python
  module: azure.storage.blob.container_client
  name: get_blob_client(blob, snapshot=None)
  summary: 'Get a client to interact with the specified blob.


    The blob need not already exist.'
  syntax:
    content: get_blob_client(blob, snapshot=None)
    parameters:
    - description: 'The blob with which to interact. If specified, this value will
        override

        a blob value specified in the blob URL.'
      id: blob
      type:
      - str
      - azure.storage.blob.models.BlobProperties
    - defaultValue: None
      description: The optional blob snapshot on which to operate.
      id: snapshot
      type:
      - str
    return:
      description: A BlobClient.
      type:
      - azure.storage.blob.blob_client.BlobClient
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.get_blob_client
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.get_container_access_policy
  langs:
  - python
  module: azure.storage.blob.container_client
  name: get_container_access_policy(lease=None, timeout=None, **kwargs)
  summary: 'Gets the permissions for the specified container.

    The permissions indicate whether container data may be accessed publicly.'
  syntax:
    content: get_container_access_policy(lease=None, timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'If specified, get_container_access_policy only succeeds if the

        container''s lease is active and matches this ID.'
      id: lease
      type:
      - str
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Access policy information in a dict.
      type:
      - dict[str, str]
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.get_container_access_policy
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.get_container_properties
  langs:
  - python
  module: azure.storage.blob.container_client
  name: get_container_properties(lease=None, timeout=None, **kwargs)
  summary: 'Returns all user-defined metadata and system properties for the specified

    container. The data returned does not include the container''s list of blobs.'
  syntax:
    content: get_container_properties(lease=None, timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'If specified, get_container_properties only succeeds if the

        container''s lease is active and matches this ID.'
      id: lease
      type:
      - azure.storage.blob.lease.LeaseClient
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Properties for the specified container within a container object.
      type:
      - azure.storage.blob.models.ContainerProperties
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.get_container_properties
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.list_blobs
  langs:
  - python
  module: azure.storage.blob.container_client
  name: list_blobs(name_starts_with=None, include=None, marker=None, timeout=None,
    **kwargs)
  summary: 'Returns a generator to list the blobs under the specified container.

    The generator will lazily follow the continuation tokens returned by

    the service.'
  syntax:
    content: list_blobs(name_starts_with=None, include=None, marker=None, timeout=None,
      **kwargs)
    parameters:
    - defaultValue: None
      description: 'Filters the results to return only blobs whose names

        begin with the specified prefix.'
      id: name_starts_with
      type:
      - str
    - defaultValue: None
      description: 'Specifies one or more additional datasets to include in the response.

        Options include: ''snapshots'', ''metadata'', ''uncommittedblobs'', ''copy'',
        ''deleted''.'
      id: include
      type:
      - list[str]
    - defaultValue: None
      description: 'An opaque continuation token. This value can be retrieved from
        the

        next_marker field of a previous generator object. If specified,

        this generator will begin returning results from this point.'
      id: marker
      type:
      - str
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: An iterable (auto-paging) response of BlobProperties.
      type:
      - azure.storage.blob.models.BlobPropertiesPaged
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.list_blobs
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.set_container_access_policy
  langs:
  - python
  module: azure.storage.blob.container_client
  name: set_container_access_policy(signed_identifiers=None, public_access=None, lease=None,
    if_modified_since=None, if_unmodified_since=None, timeout=None, **kwargs)
  summary: 'Sets the permissions for the specified container or stored access

    policies that may be used with Shared Access Signatures. The permissions

    indicate whether blobs in a container may be accessed publicly.'
  syntax:
    content: set_container_access_policy(signed_identifiers=None, public_access=None,
      lease=None, if_modified_since=None, if_unmodified_since=None, timeout=None,
      **kwargs)
    parameters:
    - defaultValue: None
      description: 'A dictionary of access policies to associate with the container.
        The

        dictionary may contain up to 5 elements. An empty dictionary

        will clear the access policies set on the service.'
      id: signed_identifiers
      type:
      - dict(str, <xref:azure.storage.blob.models.AccessPolicy>)
    - defaultValue: None
      description: 'Possible values include: container, blob.'
      id: public_access
      type:
      - azure.storage.blob.models.PublicAccess
    - defaultValue: None
      description: 'Required if the container has an active lease. Value can be a
        LeaseClient object

        or the lease ID as a string.'
      id: lease
      type:
      - azure.storage.blob.lease.LeaseClient
      - str
    - defaultValue: None
      description: 'A datetime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified date/time.'
      id: if_modified_since
      type:
      - datetime
    - defaultValue: None
      description: 'A datetime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Container-updated property dict (Etag and last modified).
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.set_container_access_policy
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.set_container_metadata
  langs:
  - python
  module: azure.storage.blob.container_client
  name: set_container_metadata(metadata=None, lease=None, if_modified_since=None,
    timeout=None, **kwargs)
  summary: 'Sets one or more user-defined name-value pairs for the specified

    container. Each call to this operation replaces all existing metadata

    attached to the container. To remove all metadata from the container,

    call this operation with no metadata dict.'
  syntax:
    content: set_container_metadata(metadata=None, lease=None, if_modified_since=None,
      timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'A dict containing name-value pairs to associate with the container
        as

        metadata. Example: {''category'':''test''}'
      id: metadata
      type:
      - dict[str, str]
    - defaultValue: None
      description: 'If specified, set_container_metadata only succeeds if the

        container''s lease is active and matches this ID.'
      id: lease
      type:
      - str
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Container-updated property dict (Etag and last modified).
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.set_container_metadata
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.upload_blob
  langs:
  - python
  module: azure.storage.blob.container_client
  name: 'upload_blob(name, data, blob_type=<BlobType.BlockBlob: ''BlockBlob''>, overwrite=False,
    length=None, metadata=None, content_settings=None, validate_content=False, lease=None,
    if_modified_since=None, if_unmodified_since=None, if_match=None, if_none_match=None,
    timeout=None, premium_page_blob_tier=None, maxsize_condition=None, max_connections=1,
    encoding=''UTF-8'', **kwargs)'
  summary: Creates a new blob from a data source with automatic chunking.
  syntax:
    content: 'upload_blob(name, data, blob_type=<BlobType.BlockBlob: ''BlockBlob''>,
      overwrite=False, length=None, metadata=None, content_settings=None, validate_content=False,
      lease=None, if_modified_since=None, if_unmodified_since=None, if_match=None,
      if_none_match=None, timeout=None, premium_page_blob_tier=None, maxsize_condition=None,
      max_connections=1, encoding=''UTF-8'', **kwargs)'
    parameters:
    - description: 'The blob with which to interact. If specified, this value will
        override

        a blob value specified in the blob URL.'
      id: name
      type:
      - str
      - azure.storage.blob.models.BlobProperties
    - description: 'The type of the blob. This can be

        either BlockBlob, PageBlob or AppendBlob. The default value is BlockBlob.'
      id: blob_type
      type:
      - azure.storage.blob.models.BlobType
    - defaultValue: BlobType.BlockBlob
      description: 'Whether the blob to be uploaded should overwrite the current data.

        If True, upload_blob will silently overwrite the existing data. If set to
        False, the

        operation will fail with ResourceExistsError. The exception to the above is
        with Append

        blob types. In this case, if data already exists, an error will not be raised
        and

        the data will be appended to the existing blob. If you set overwrite=True,
        then the existing

        blob will be deleted, and a new one created.'
      id: overwrite
      type:
      - bool
    - defaultValue: 'False'
      description: 'Number of bytes to read from the stream. This is optional, but

        should be supplied for optimal performance.'
      id: length
      type:
      - int
    - defaultValue: None
      description: Name-value pairs associated with the blob as metadata.
      id: metadata
      type:
      - dict(str, str)
    - defaultValue: None
      description: ContentSettings object used to set blob properties.
      id: content_settings
      type:
      - azure.storage.blob.models.ContentSettings
    - defaultValue: None
      description: 'If true, calculates an MD5 hash for each chunk of the blob. The
        storage

        service checks the hash of the content that has arrived with the hash

        that was sent. This is primarily valuable for detecting bitflips on

        the wire if using http instead of https as https (the default) will

        already validate. Note that this MD5 hash is not stored with the

        blob. Also note that if enabled, the memory-efficient upload algorithm

        will not be used, because computing the MD5 hash requires buffering

        entire blocks, and doing so defeats the purpose of the memory-efficient algorithm.'
      id: validate_content
      type:
      - bool
    - defaultValue: 'False'
      description: 'Required if the container has an active lease. Value can be a
        LeaseClient object

        or the lease ID as a string.'
      id: lease
      type:
      - azure.storage.blob.lease.LeaseClient
      - str
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only

        if the resource has been modified since the specified time.'
      id: if_modified_since
      type:
      - datetime
    - defaultValue: None
      description: 'A DateTime value. Azure expects the date value passed in to be
        UTC.

        If timezone is included, any non-UTC datetimes will be converted to UTC.

        If a date is passed in without timezone info, it is assumed to be UTC.

        Specify this header to perform the operation only if

        the resource has not been modified since the specified date/time.'
      id: if_unmodified_since
      type:
      - datetime
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header
        to perform

        the operation only if the resource''s ETag matches the value specified.'
      id: if_match
      type:
      - str
    - defaultValue: None
      description: 'An ETag value, or the wildcard character (*). Specify this header

        to perform the operation only if the resource''s ETag does not match

        the value specified. Specify the wildcard character (*) to perform

        the operation only if the resource does not exist, and fail the

        operation if it does exist.'
      id: if_none_match
      type:
      - str
    - defaultValue: None
      description: 'The timeout parameter is expressed in seconds. This method may
        make

        multiple calls to the Azure service and the timeout will apply to

        each call individually.'
      id: timeout
      type:
      - int
    - defaultValue: None
      description: 'A page blob tier value to set the blob to. The tier correlates
        to the size of the

        blob and number of allowed IOPS. This is only applicable to page blobs on

        premium storage accounts.'
      id: premium_page_blob_tier
      type:
      - azure.storage.blob.models.PremiumPageBlobTier
    - defaultValue: None
      description: 'Optional conditional header. The max length in bytes permitted
        for

        the append blob. If the Append Block operation would cause the blob

        to exceed that limit or if the blob size is already greater than the

        value specified in this header, the request will fail with

        MaxBlobSizeConditionNotMet error (HTTP status code 412 - Precondition Failed).'
      id: maxsize_condition
      type:
      - int
    - defaultValue: None
      description: 'Maximum number of parallel connections to use when the blob size
        exceeds

        64MB.'
      id: max_connections
      type:
      - int
    - defaultValue: '1'
      description: Defaults to UTF-8.
      id: encoding
      type:
      - str
    - defaultValue: UTF-8
      id: encoding
    return:
      description: A BlobClient to interact with the newly uploaded blob.
      type:
      - azure.storage.blob.blob_cient.BlobClient
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.upload_blob
- class: azure.storage.blob.container_client.ContainerClient
  fullName: azure.storage.blob.container_client.ContainerClient.walk_blobs
  langs:
  - python
  module: azure.storage.blob.container_client
  name: walk_blobs(name_starts_with=None, include=None, delimiter='/', marker=None,
    timeout=None, **kwargs)
  summary: 'Returns a generator to list the blobs under the specified container.

    The generator will lazily follow the continuation tokens returned by

    the service. This operation will list blobs in accordance with a hierarchy,

    as delimited by the specified delimiter character.'
  syntax:
    content: walk_blobs(name_starts_with=None, include=None, delimiter='/', marker=None,
      timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'Filters the results to return only blobs whose names

        begin with the specified prefix.'
      id: name_starts_with
      type:
      - str
    - defaultValue: None
      description: 'Specifies one or more additional datasets to include in the response.

        Options include: ''snapshots'', ''metadata'', ''uncommittedblobs'', ''copy'',
        ''deleted''.'
      id: include
      type:
      - list[str]
    - defaultValue: /
      description: 'When the request includes this parameter, the operation returns
        a BlobPrefix

        element in the response body that acts as a placeholder for all blobs whose

        names begin with the same substring up to the appearance of the delimiter

        character. The delimiter may be a single character or a string.'
      id: delimiter
      type:
      - str
    - defaultValue: None
      description: 'An opaque continuation token. This value can be retrieved from
        the

        next_marker field of a previous generator object. If specified,

        this generator will begin returning results from this point.'
      id: marker
      type:
      - str
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: An iterable (auto-paging) response of BlobProperties.
      type:
      - azure.storage.blob.models.BlobPrefix
  type: method
  uid: azure.storage.blob.container_client.ContainerClient.walk_blobs
references:
- fullName: azure.storage.blob.container_client.ContainerClient.acquire_lease
  isExternal: false
  name: acquire_lease(lease_duration=-1, lease_id=None, if_modified_since=None, if_unmodified_since=None,
    if_match=None, if_none_match=None, timeout=None, **kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.acquire_lease
- fullName: azure.storage.blob.container_client.ContainerClient.create_container
  isExternal: false
  name: create_container(metadata=None, public_access=None, timeout=None, **kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.create_container
- fullName: azure.storage.blob.container_client.ContainerClient.delete_blob
  isExternal: false
  name: delete_blob(blob, delete_snapshots=None, lease=None, if_modified_since=None,
    if_unmodified_since=None, if_match=None, if_none_match=None, timeout=None, **kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.delete_blob
- fullName: azure.storage.blob.container_client.ContainerClient.delete_container
  isExternal: false
  name: delete_container(lease=None, if_modified_since=None, if_unmodified_since=None,
    if_match=None, if_none_match=None, timeout=None, **kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.delete_container
- fullName: azure.storage.blob.container_client.ContainerClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, container, credential=None, **kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.from_connection_string
- fullName: azure.storage.blob.container_client.ContainerClient.generate_shared_access_signature
  isExternal: false
  name: generate_shared_access_signature(permission=None, expiry=None, start=None,
    policy_id=None, ip=None, protocol=None, cache_control=None, content_disposition=None,
    content_encoding=None, content_language=None, content_type=None)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.generate_shared_access_signature
- fullName: azure.storage.blob.container_client.ContainerClient.get_account_information
  isExternal: false
  name: get_account_information(**kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.get_account_information
- fullName: azure.storage.blob.container_client.ContainerClient.get_blob_client
  isExternal: false
  name: get_blob_client(blob, snapshot=None)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.get_blob_client
- fullName: azure.storage.blob.container_client.ContainerClient.get_container_access_policy
  isExternal: false
  name: get_container_access_policy(lease=None, timeout=None, **kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.get_container_access_policy
- fullName: azure.storage.blob.container_client.ContainerClient.get_container_properties
  isExternal: false
  name: get_container_properties(lease=None, timeout=None, **kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.get_container_properties
- fullName: azure.storage.blob.container_client.ContainerClient.list_blobs
  isExternal: false
  name: list_blobs(name_starts_with=None, include=None, marker=None, timeout=None,
    **kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.list_blobs
- fullName: azure.storage.blob.container_client.ContainerClient.set_container_access_policy
  isExternal: false
  name: set_container_access_policy(signed_identifiers=None, public_access=None, lease=None,
    if_modified_since=None, if_unmodified_since=None, timeout=None, **kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.set_container_access_policy
- fullName: azure.storage.blob.container_client.ContainerClient.set_container_metadata
  isExternal: false
  name: set_container_metadata(metadata=None, lease=None, if_modified_since=None,
    timeout=None, **kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.set_container_metadata
- fullName: azure.storage.blob.container_client.ContainerClient.upload_blob
  isExternal: false
  name: 'upload_blob(name, data, blob_type=<BlobType.BlockBlob: ''BlockBlob''>, overwrite=False,
    length=None, metadata=None, content_settings=None, validate_content=False, lease=None,
    if_modified_since=None, if_unmodified_since=None, if_match=None, if_none_match=None,
    timeout=None, premium_page_blob_tier=None, maxsize_condition=None, max_connections=1,
    encoding=''UTF-8'', **kwargs)'
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.upload_blob
- fullName: azure.storage.blob.container_client.ContainerClient.walk_blobs
  isExternal: false
  name: walk_blobs(name_starts_with=None, include=None, delimiter='/', marker=None,
    timeout=None, **kwargs)
  parent: azure.storage.blob.container_client.ContainerClient
  uid: azure.storage.blob.container_client.ContainerClient.walk_blobs
- fullName: dict[str, str]
  name: dict[str, str]
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: dict[str, str]
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: list[str]
  name: list[str]
  spec.python:
  - fullName: list
    name: list
    uid: list
  - fullName: '['
    name: '['
  - fullName: str
    name: str
    uid: str
  - fullName: ']'
    name: ']'
  uid: list[str]
- fullName: dict(str, <xref:azure.storage.blob.models.AccessPolicy>)
  name: dict(str, AccessPolicy>)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: <xref:azure.storage.blob.models.AccessPolicy>
    name: AccessPolicy>
    uid: <xref:azure.storage.blob.models.AccessPolicy>
  - fullName: )
    name: )
  uid: dict(str, <xref:azure.storage.blob.models.AccessPolicy>)
