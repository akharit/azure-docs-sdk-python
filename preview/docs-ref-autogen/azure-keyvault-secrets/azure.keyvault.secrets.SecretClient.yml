### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.keyvault.secrets.SecretClient.backup_secret
  - azure.keyvault.secrets.SecretClient.delete_secret
  - azure.keyvault.secrets.SecretClient.get_deleted_secret
  - azure.keyvault.secrets.SecretClient.get_secret
  - azure.keyvault.secrets.SecretClient.list_deleted_secrets
  - azure.keyvault.secrets.SecretClient.list_secret_versions
  - azure.keyvault.secrets.SecretClient.list_secrets
  - azure.keyvault.secrets.SecretClient.purge_deleted_secret
  - azure.keyvault.secrets.SecretClient.recover_deleted_secret
  - azure.keyvault.secrets.SecretClient.restore_secret
  - azure.keyvault.secrets.SecretClient.set_secret
  - azure.keyvault.secrets.SecretClient.update_secret
  class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.keyvault.secrets._internal._KeyVaultClientBase
  langs:
  - python
  module: azure.keyvault.secrets
  name: SecretClient
  summary: SecretClient is a high-level interface for managing a vault's secrets.
  syntax:
    content: SecretClient(vault_url, credential, config=None, transport=None, api_version=None,
      **kwargs)
  type: class
  uid: azure.keyvault.secrets.SecretClient
- class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient.backup_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: backup_secret(name, **kwargs)
  summary: 'Backs up the specified secret.


    Requests that a backup of the specified secret be downloaded to the

    client. All versions of the secret will be downloaded. This operation

    requires the secrets/backup permission.'
  syntax:
    content: backup_secret(name, **kwargs)
    parameters:
    - description: The name of the secret.
      id: name
      type:
      - str
    return:
      description: The raw bytes of the secret backup.
      type:
      - bytes
  type: method
  uid: azure.keyvault.secrets.SecretClient.backup_secret
- class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient.delete_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: delete_secret(name, **kwargs)
  summary: 'Deletes a secret from the vault.


    The DELETE operation applies to any secret stored in Azure Key Vault.

    DELETE cannot be applied to an individual version of a secret. This

    operation requires the secrets/delete permission.'
  syntax:
    content: delete_secret(name, **kwargs)
    parameters:
    - description: The name of the secret
      id: name
      type:
      - str
    return:
      description: The deleted secret.
      type:
      - azure.keyvault.secrets._models.DeletedSecret
  type: method
  uid: azure.keyvault.secrets.SecretClient.delete_secret
- class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient.get_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: get_deleted_secret(name, **kwargs)
  summary: 'Gets the specified deleted secret.


    The Get Deleted Secret operation returns the specified deleted secret

    along with its attributes. This operation requires the secrets/get permission.'
  syntax:
    content: get_deleted_secret(name, **kwargs)
    parameters:
    - description: The name of the secret
      id: name
      type:
      - str
    return:
      description: The deleted secret.
      type:
      - azure.keyvault.secrets._models.DeletedSecret
  type: method
  uid: azure.keyvault.secrets.SecretClient.get_deleted_secret
- class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient.get_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: get_secret(name, version=None, **kwargs)
  summary: 'Get a specified secret from the vault.


    The GET operation is applicable to any secret stored in Azure Key

    Vault. This operation requires the secrets/get permission.'
  syntax:
    content: get_secret(name, version=None, **kwargs)
    parameters:
    - description: The name of the secret.
      id: name
      type:
      - str
    - defaultValue: None
      description: 'The version of the secret. If version is None or the empty string,
        the latest version of

        the secret is returned'
      id: version
      type:
      - str
    return:
      description: An instance of Secret
      type:
      - azure.keyvault.secrets._models.Secret
  type: method
  uid: azure.keyvault.secrets.SecretClient.get_secret
- class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient.list_deleted_secrets
  langs:
  - python
  module: azure.keyvault.secrets
  name: list_deleted_secrets(**kwargs)
  summary: 'Lists deleted secrets of the vault.


    The Get Deleted Secrets operation returns the secrets that have

    been deleted for a vault enabled for soft-delete. This

    operation requires the secrets/list permission.'
  syntax:
    content: list_deleted_secrets(**kwargs)
    parameters: []
    return:
      description: An iterator like instance of DeletedSecrets
      type:
      - Generator[azure.keyvault.secrets._models.DeletedSecret]
  type: method
  uid: azure.keyvault.secrets.SecretClient.list_deleted_secrets
- class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient.list_secret_versions
  langs:
  - python
  module: azure.keyvault.secrets
  name: list_secret_versions(name, **kwargs)
  summary: 'List all versions of the specified secret.


    The full secret identifier and attributes are provided in the response.

    No values are returned for the secrets. This operations requires the

    secrets/list permission.'
  syntax:
    content: list_secret_versions(name, **kwargs)
    parameters:
    - description: The name of the secret.
      id: name
      type:
      - str
    return:
      description: An iterator like instance of Secret
      type:
      - Generator[azure.keyvault.secrets._models.SecretAttributes]
  type: method
  uid: azure.keyvault.secrets.SecretClient.list_secret_versions
- class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient.list_secrets
  langs:
  - python
  module: azure.keyvault.secrets
  name: list_secrets(**kwargs)
  summary: 'List secrets in the vault.


    The Get Secrets operation is applicable to the entire vault. However,

    only the latest secret identifier and its attributes are provided in the

    response. No secret values are returned and individual secret versions are

    not listed in the response.  This operation requires the secrets/list permission.'
  syntax:
    content: list_secrets(**kwargs)
    parameters: []
    return:
      description: An iterator like instance of Secrets
      type:
      - Generator[azure.keyvault.secrets._models.SecretAttributes]
  type: method
  uid: azure.keyvault.secrets.SecretClient.list_secrets
- class: azure.keyvault.secrets.SecretClient
  example:
  - "<!-- literal_block {\"ids\": [], \"classes\": [], \"names\": [], \"dupnames\"\
    : [], \"backrefs\": [], \"xml:space\": \"preserve\", \"language\": \"python\"\
    , \"linenos\": false, \"highlight_args\": {}} -->\n\n````python\n\n   # if the\
    \ vault has soft-delete enabled, purge permanently deletes the secret\n   # (with\
    \ soft-delete disabled, delete itself is permanent)\n   secret_client.purge_deleted_secret(\"\
    secret-name\")\n   ````\n"
  fullName: azure.keyvault.secrets.SecretClient.purge_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: purge_deleted_secret(name, **kwargs)
  summary: 'Permanently deletes the specified secret.


    The purge deleted secret operation removes the secret permanently, without the

    possibility of recovery. This operation can only be enabled on a soft-delete enabled

    vault. This operation requires the secrets/purge permission.'
  syntax:
    content: purge_deleted_secret(name, **kwargs)
    parameters:
    - description: The name of the secret
      id: name
      type:
      - str
    return:
      description: None
  type: method
  uid: azure.keyvault.secrets.SecretClient.purge_deleted_secret
- class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient.recover_deleted_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: recover_deleted_secret(name, **kwargs)
  summary: 'Recovers the deleted secret to the latest version.


    Recovers the deleted secret in the specified vault.

    This operation can only be performed on a soft-delete enabled

    vault. This operation requires the secrets/recover permission.'
  syntax:
    content: recover_deleted_secret(name, **kwargs)
    parameters:
    - description: The name of the secret
      id: name
      type:
      - str
    return:
      description: The recovered deleted secret
      type:
      - azure.keyvault.secrets._models.SecretAttributes
  type: method
  uid: azure.keyvault.secrets.SecretClient.recover_deleted_secret
- class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient.restore_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: restore_secret(backup, **kwargs)
  summary: 'Restore a backed up secret to the vault.


    Restores a backed up secret, and all its versions, to a vault. This

    operation requires the secrets/restore permission.'
  syntax:
    content: restore_secret(backup, **kwargs)
    parameters:
    - description: The raw bytes of the secret backup
      id: backup
      type:
      - bytes
    return:
      description: The restored secret
      type:
      - azure.keyvault.secrets._models.SecretAttributes
  type: method
  uid: azure.keyvault.secrets.SecretClient.restore_secret
- class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient.set_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: set_secret(name, value, content_type=None, enabled=None, not_before=None,
    expires=None, tags=None, **kwargs)
  summary: 'Sets a secret in the vault.


    The SET operation adds a secret to the Azure Key Vault. If the named

    secret already exists, Azure Key Vault creates a new version of that

    secret. This operation requires the secrets/set permission.'
  syntax:
    content: set_secret(name, value, content_type=None, enabled=None, not_before=None,
      expires=None, tags=None, **kwargs)
    parameters:
    - description: The name of the secret
      id: name
      type:
      - str
    - description: The value of the secret
      id: value
      type:
      - str
    - defaultValue: None
      description: Type of the secret value such as a password
      id: content_type
      type:
      - str
    - defaultValue: None
      description: Determines whether the object is enabled.
      id: enabled
      type:
      - bool
    - defaultValue: None
      description: Not before date of the secret in UTC
      id: not_before
      type:
      - datetime.datetime
    - defaultValue: None
      description: Expiry date of the secret  in UTC.
      id: expires
      type:
      - datetime.datetime
    - defaultValue: None
      description: Application specific metadata in the form of key-value pairs.
      id: tags
      type:
      - dict(str, str)
    return:
      description: The created secret
      type:
      - azure.keyvault.secrets._models.Secret
  type: method
  uid: azure.keyvault.secrets.SecretClient.set_secret
- class: azure.keyvault.secrets.SecretClient
  fullName: azure.keyvault.secrets.SecretClient.update_secret
  langs:
  - python
  module: azure.keyvault.secrets
  name: update_secret(name, version=None, content_type=None, enabled=None, not_before=None,
    expires=None, tags=None, **kwargs)
  summary: 'Updates the attributes associated with a specified secret in the key vault.


    The UPDATE operation changes specified attributes of an existing stored secret.

    Attributes that are not specified in the request are left unchanged. The value

    of a secret itself cannot be changed. This operation requires the secrets/set
    permission.'
  syntax:
    content: update_secret(name, version=None, content_type=None, enabled=None, not_before=None,
      expires=None, tags=None, **kwargs)
    parameters:
    - description: The name of the secret
      id: name
      type:
      - str
    - defaultValue: None
      description: The version of the secret.
      id: version
      type:
      - str
    - defaultValue: None
      description: Type of the secret value such as a password
      id: content_type
      type:
      - str
    - defaultValue: None
      description: Determines whether the object is enabled.
      id: enabled
      type:
      - bool
    - defaultValue: None
      description: Not before date of the secret  in UTC
      id: not_before
      type:
      - datetime.datetime
    - defaultValue: None
      description: Expiry date  of the secret in UTC.
      id: expires
      type:
      - datetime.datetime
    - defaultValue: None
      description: Application specific metadata in the form of key-value pairs.
      id: tags
      type:
      - dict(str, str)
    return:
      description: The created secret
      type:
      - azure.keyvault.secrets._models.SecretAttributes
  type: method
  uid: azure.keyvault.secrets.SecretClient.update_secret
references:
- fullName: azure.keyvault.secrets.SecretClient.backup_secret
  isExternal: false
  name: backup_secret(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.backup_secret
- fullName: azure.keyvault.secrets.SecretClient.delete_secret
  isExternal: false
  name: delete_secret(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.delete_secret
- fullName: azure.keyvault.secrets.SecretClient.get_deleted_secret
  isExternal: false
  name: get_deleted_secret(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.get_deleted_secret
- fullName: azure.keyvault.secrets.SecretClient.get_secret
  isExternal: false
  name: get_secret(name, version=None, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.get_secret
- fullName: azure.keyvault.secrets.SecretClient.list_deleted_secrets
  isExternal: false
  name: list_deleted_secrets(**kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.list_deleted_secrets
- fullName: azure.keyvault.secrets.SecretClient.list_secret_versions
  isExternal: false
  name: list_secret_versions(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.list_secret_versions
- fullName: azure.keyvault.secrets.SecretClient.list_secrets
  isExternal: false
  name: list_secrets(**kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.list_secrets
- fullName: azure.keyvault.secrets.SecretClient.purge_deleted_secret
  isExternal: false
  name: purge_deleted_secret(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.purge_deleted_secret
- fullName: azure.keyvault.secrets.SecretClient.recover_deleted_secret
  isExternal: false
  name: recover_deleted_secret(name, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.recover_deleted_secret
- fullName: azure.keyvault.secrets.SecretClient.restore_secret
  isExternal: false
  name: restore_secret(backup, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.restore_secret
- fullName: azure.keyvault.secrets.SecretClient.set_secret
  isExternal: false
  name: set_secret(name, value, content_type=None, enabled=None, not_before=None,
    expires=None, tags=None, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.set_secret
- fullName: azure.keyvault.secrets.SecretClient.update_secret
  isExternal: false
  name: update_secret(name, version=None, content_type=None, enabled=None, not_before=None,
    expires=None, tags=None, **kwargs)
  parent: azure.keyvault.secrets.SecretClient
  uid: azure.keyvault.secrets.SecretClient.update_secret
- fullName: Generator[azure.keyvault.secrets._models.DeletedSecret]
  name: Generator[DeletedSecret]
  spec.python:
  - fullName: Generator
    name: Generator
    uid: Generator
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.secrets._models.DeletedSecret
    name: DeletedSecret
    uid: azure.keyvault.secrets._models.DeletedSecret
  - fullName: ']'
    name: ']'
  uid: Generator[azure.keyvault.secrets._models.DeletedSecret]
- fullName: Generator[azure.keyvault.secrets._models.SecretAttributes]
  name: Generator[SecretAttributes]
  spec.python:
  - fullName: Generator
    name: Generator
    uid: Generator
  - fullName: '['
    name: '['
  - fullName: azure.keyvault.secrets._models.SecretAttributes
    name: SecretAttributes
    uid: azure.keyvault.secrets._models.SecretAttributes
  - fullName: ']'
    name: ']'
  uid: Generator[azure.keyvault.secrets._models.SecretAttributes]
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
