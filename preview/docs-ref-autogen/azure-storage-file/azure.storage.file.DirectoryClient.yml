### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.storage.file.DirectoryClient.close_handles
  - azure.storage.file.DirectoryClient.create_directory
  - azure.storage.file.DirectoryClient.create_subdirectory
  - azure.storage.file.DirectoryClient.delete_directory
  - azure.storage.file.DirectoryClient.delete_file
  - azure.storage.file.DirectoryClient.delete_subdirectory
  - azure.storage.file.DirectoryClient.from_connection_string
  - azure.storage.file.DirectoryClient.get_directory_properties
  - azure.storage.file.DirectoryClient.get_file_client
  - azure.storage.file.DirectoryClient.get_subdirectory_client
  - azure.storage.file.DirectoryClient.list_directories_and_files
  - azure.storage.file.DirectoryClient.list_handles
  - azure.storage.file.DirectoryClient.set_directory_metadata
  - azure.storage.file.DirectoryClient.upload_file
  class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient
  inheritance:
  - inheritance:
    - type: builtins.object
    type: azure.storage.file._shared.utils.StorageAccountHostsMixin
  langs:
  - python
  module: azure.storage.file
  name: DirectoryClient
  summary: 'A client to interact with a specific directory, although it may not yet
    exist.


    For operations relating to a specific subdirectory or file in this share, the
    clients for those

    entities can also be retrieved using the *get_subdirectory_client* and *get_file_client*
    functions.s'
  syntax:
    content: DirectoryClient(directory_url, share=None, directory_path=None, snapshot=None,
      credential=None, **kwargs)
    parameters:
    - description: 'The full URI to the directory. This can also be a URL to the storage
        account

        or share, in which case the directory and/or share must also be specified.'
      id: directory_url
      type:
      - str
    - description: 'The share for the directory. If specified, this value will override

        a share value specified in the directory URL.'
      id: share
      type:
      - str
      - azure.storage.file.models.ShareProperties
    - description: 'The directory path for the directory with which to interact.

        If specified, this value will override a directory value specified in the
        directory URL.'
      id: directory_path
      type:
      - str
    - description: An optional share snapshot on which to operate.
      id: snapshot
      type:
      - str
    - description: 'The credential with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string or
        an account

        shared access key.'
      id: credential
    variables:
    - description: 'The full endpoint URL to the Directory, including SAS token if
        used. This could be

        either the primary endpoint, or the secondard endpoint depending on the current
        *location_mode*.'
      id: url
      type:
      - str
    - description: The full primary endpoint URL.
      id: primary_endpoint
      type:
      - str
    - description: The hostname of the primary endpoint.
      id: primary_hostname
      type:
      - str
    - description: 'The full secondard endpoint URL if configured. If not available

        a ValueError will be raised. To explicitly specify a secondary hostname, use
        the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_endpoint
      type:
      - str
    - description: 'The hostname of the secondary endpoint. If not available this

        will be None. To explicitly specify a secondary hostname, use the optional

        *secondary_hostname* keyword argument on instantiation.'
      id: secondary_hostname
      type:
      - str
    - description: 'The location mode that the client is currently using. By default

        this will be "primary". Options include "primary" and "secondary".'
      id: location_mode
      type:
      - str
  type: class
  uid: azure.storage.file.DirectoryClient
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.close_handles
  langs:
  - python
  module: azure.storage.file
  name: close_handles(handle=None, recursive=False, timeout=None, **kwargs)
  summary: 'Close open file handles.


    This operation may not finish with a single call, so a long-running poller

    is returned that can be used to wait until the operation is complete.'
  syntax:
    content: close_handles(handle=None, recursive=False, timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'Optionally, a specific handle to close. The default value is ''*''

        which will attempt to close all open handles.'
      id: handle
      type:
      - str
      - azure.storage.file.models.Handle
    - defaultValue: 'False'
      description: 'Boolean that specifies if operation should apply to the directory
        specified by the client,

        its files, its subdirectories and their files. Default value is False.'
      id: recursive
      type:
      - bool
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: A long-running poller to get operation status.
      type:
      - azure.core.polling.LROPoller
  type: method
  uid: azure.storage.file.DirectoryClient.close_handles
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.create_directory
  langs:
  - python
  module: azure.storage.file
  name: create_directory(metadata=None, timeout=None, **kwargs)
  summary: Creates a new directory under the directory referenced by the client.
  syntax:
    content: create_directory(metadata=None, timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: Name-value pairs associated with the directory as metadata.
      id: metadata
      type:
      - dict(str, str)
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Directory-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.file.DirectoryClient.create_directory
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.create_subdirectory
  langs:
  - python
  module: azure.storage.file
  name: create_subdirectory(directory_name, metadata=None, timeout=None, **kwargs)
  summary: 'Creates a new subdirectory and returns a client to interact

    with the subdirectory.'
  syntax:
    content: create_subdirectory(directory_name, metadata=None, timeout=None, **kwargs)
    parameters:
    - description: The name of the subdirectory.
      id: directory_name
      type:
      - str
    - defaultValue: None
      description: Name-value pairs associated with the subdirectory as metadata.
      id: metadata
      type:
      - dict(str, str)
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: DirectoryClient
      type:
      - azure.storage.file.directory_client.DirectoryClient
  type: method
  uid: azure.storage.file.DirectoryClient.create_subdirectory
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.delete_directory
  langs:
  - python
  module: azure.storage.file
  name: delete_directory(timeout=None, **kwargs)
  summary: 'Marks the directory for deletion. The directory is

    later deleted during garbage collection.'
  syntax:
    content: delete_directory(timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.file.DirectoryClient.delete_directory
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.delete_file
  langs:
  - python
  module: azure.storage.file
  name: delete_file(file_name, timeout=None, **kwargs)
  summary: 'Marks the specified file for deletion. The file is later

    deleted during garbage collection.'
  syntax:
    content: delete_file(file_name, timeout=None, **kwargs)
    parameters:
    - description: The name of the file to delete.
      id: file_name
      type:
      - str
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.file.DirectoryClient.delete_file
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.delete_subdirectory
  langs:
  - python
  module: azure.storage.file
  name: delete_subdirectory(directory_name, timeout=None, **kwargs)
  summary: Deletes a subdirectory.
  syntax:
    content: delete_subdirectory(directory_name, timeout=None, **kwargs)
    parameters:
    - description: The name of the subdirectory.
      id: directory_name
      type:
      - str
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      type:
      - None
  type: method
  uid: azure.storage.file.DirectoryClient.delete_subdirectory
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.from_connection_string
  langs:
  - python
  module: azure.storage.file
  name: from_connection_string(conn_str, share=None, directory_path=None, credential=None,
    **kwargs)
  summary: Create DirectoryClient from a Connection String.
  syntax:
    content: from_connection_string(conn_str, share=None, directory_path=None, credential=None,
      **kwargs)
    parameters:
    - description: A connection string to an Azure Storage account.
      id: conn_str
      type:
      - str
    - description: 'The share. This can either be the name of the share,

        or an instance of ShareProperties'
      id: share
      type:
      - str
      - azure.storage.file.models.ShareProperties
    - defaultValue: None
      description: The directory path.
      id: directory_path
      type:
      - str
    - defaultValue: None
      description: 'The credential with which to authenticate. This is optional if
        the

        account URL already has a SAS token. The value can be a SAS token string or
        an account

        shared access key.'
      id: credential
    - defaultValue: None
      id: credential
  type: method
  uid: azure.storage.file.DirectoryClient.from_connection_string
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.get_directory_properties
  langs:
  - python
  module: azure.storage.file
  name: get_directory_properties(timeout=None, **kwargs)
  summary: 'Returns all user-defined metadata and system properties for the

    specified directory. The data returned does not include the directory''s

    list of files.'
  syntax:
    content: get_directory_properties(timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: DirectoryProperties
      type:
      - azure.storage.file.models.DirectoryProperties
  type: method
  uid: azure.storage.file.DirectoryClient.get_directory_properties
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.get_file_client
  langs:
  - python
  module: azure.storage.file
  name: get_file_client(file_name, **kwargs)
  summary: 'Get a client to interact with a specific file.


    The file need not already exist.'
  syntax:
    content: get_file_client(file_name, **kwargs)
    parameters:
    - description: The name of the file.
      id: file_name
    return:
      description: A File Client.
      type:
      - azure.storage.file.file_client.FileClient
  type: method
  uid: azure.storage.file.DirectoryClient.get_file_client
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.get_subdirectory_client
  langs:
  - python
  module: azure.storage.file
  name: get_subdirectory_client(directory_name, **kwargs)
  summary: 'Get a client to interact with a specific subdirectory.


    The subdirectory need not already exist.'
  syntax:
    content: get_subdirectory_client(directory_name, **kwargs)
    parameters:
    - description: The name of the subdirectory.
      id: directory_name
      type:
      - str
    return:
      description: A Directory Client.
      type:
      - azure.storage.file.directory_client.DirectoryClient
  type: method
  uid: azure.storage.file.DirectoryClient.get_subdirectory_client
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.list_directories_and_files
  langs:
  - python
  module: azure.storage.file
  name: list_directories_and_files(name_starts_with=None, marker=None, timeout=None,
    **kwargs)
  summary: Lists all the directories and files under the directory.
  syntax:
    content: list_directories_and_files(name_starts_with=None, marker=None, timeout=None,
      **kwargs)
    parameters:
    - defaultValue: None
      description: 'Filters the results to return only entities whose names

        begin with the specified prefix.'
      id: name_starts_with
      type:
      - str
    - defaultValue: None
      description: 'An opaque continuation token. This value can be retrieved from
        the

        next_marker field of a previous generator object. If specified,

        this generator will begin returning results from this point.'
      id: marker
      type:
      - str
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: An auto-paging iterable of dict-like DirectoryProperties and FileProperties
      type:
      - azure.storage.file.models.DirectoryPropertiesPaged
  type: method
  uid: azure.storage.file.DirectoryClient.list_directories_and_files
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.list_handles
  langs:
  - python
  module: azure.storage.file
  name: list_handles(marker=None, recursive=False, timeout=None, **kwargs)
  summary: Lists opened handles on a directory or a file under the directory.
  syntax:
    content: list_handles(marker=None, recursive=False, timeout=None, **kwargs)
    parameters:
    - defaultValue: None
      description: 'An opaque continuation token. This value can be retrieved from
        the

        next_marker field of a previous generator object. If specified,

        this generator will begin returning results from this point.'
      id: marker
      type:
      - str
    - defaultValue: 'False'
      description: 'Boolean that specifies if operation should apply to the directory
        specified by the client,

        its files, its subdirectories and their files. Default value is False.'
      id: recursive
      type:
      - bool
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: An auto-paging iterable of HandleItems
      type:
      - azure.storage.file.models.HandlesPaged
  type: method
  uid: azure.storage.file.DirectoryClient.list_handles
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.set_directory_metadata
  langs:
  - python
  module: azure.storage.file
  name: set_directory_metadata(metadata, timeout=None, **kwargs)
  summary: 'Sets the metadata for the directory.


    Each call to this operation replaces all existing metadata

    attached to the directory. To remove all metadata from the directory,

    call this operation with an empty metadata dict.'
  syntax:
    content: set_directory_metadata(metadata, timeout=None, **kwargs)
    parameters:
    - description: Name-value pairs associated with the directory as metadata.
      id: metadata
      type:
      - dict(str, str)
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    return:
      description: Directory-updated property dict (Etag and last modified).
      type:
      - dict(str, Any)
  type: method
  uid: azure.storage.file.DirectoryClient.set_directory_metadata
- class: azure.storage.file.DirectoryClient
  fullName: azure.storage.file.DirectoryClient.upload_file
  langs:
  - python
  module: azure.storage.file
  name: upload_file(file_name, data, length=None, metadata=None, content_settings=None,
    validate_content=False, max_connections=1, timeout=None, encoding='UTF-8', **kwargs)
  summary: 'Creates a new file in the directory and returns a FileClient

    to interact with the file.'
  syntax:
    content: upload_file(file_name, data, length=None, metadata=None, content_settings=None,
      validate_content=False, max_connections=1, timeout=None, encoding='UTF-8', **kwargs)
    parameters:
    - description: The name of the file.
      id: file_name
      type:
      - str
    - description: Content of the file.
      id: data
      type:
      - Any
    - defaultValue: None
      description: Length of the file in bytes. Specify its maximum size, up to 1
        TiB.
      id: length
      type:
      - int
    - defaultValue: None
      description: Name-value pairs associated with the file as metadata.
      id: metadata
      type:
      - dict(str, str)
    - defaultValue: None
      description: ContentSettings object used to set file properties.
      id: content_settings
      type:
      - azure.storage.file.models.ContentSettings
    - defaultValue: 'False'
      description: 'If true, calculates an MD5 hash for each range of the file. The
        storage

        service checks the hash of the content that has arrived with the hash

        that was sent. This is primarily valuable for detecting bitflips on

        the wire if using http instead of https as https (the default) will

        already validate. Note that this MD5 hash is not stored with the

        file.'
      id: validate_content
      type:
      - bool
    - defaultValue: '1'
      description: Maximum number of parallel connections to use.
      id: max_connections
      type:
      - int
    - defaultValue: None
      description: The timeout parameter is expressed in seconds.
      id: timeout
      type:
      - int
    - defaultValue: UTF-8
      description: Defaults to UTF-8.
      id: encoding
      type:
      - str
    return:
      description: FileClient
      type:
      - azure.storage.file.file_client.FileClient
  type: method
  uid: azure.storage.file.DirectoryClient.upload_file
references:
- fullName: azure.storage.file.DirectoryClient.close_handles
  isExternal: false
  name: close_handles(handle=None, recursive=False, timeout=None, **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.close_handles
- fullName: azure.storage.file.DirectoryClient.create_directory
  isExternal: false
  name: create_directory(metadata=None, timeout=None, **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.create_directory
- fullName: azure.storage.file.DirectoryClient.create_subdirectory
  isExternal: false
  name: create_subdirectory(directory_name, metadata=None, timeout=None, **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.create_subdirectory
- fullName: azure.storage.file.DirectoryClient.delete_directory
  isExternal: false
  name: delete_directory(timeout=None, **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.delete_directory
- fullName: azure.storage.file.DirectoryClient.delete_file
  isExternal: false
  name: delete_file(file_name, timeout=None, **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.delete_file
- fullName: azure.storage.file.DirectoryClient.delete_subdirectory
  isExternal: false
  name: delete_subdirectory(directory_name, timeout=None, **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.delete_subdirectory
- fullName: azure.storage.file.DirectoryClient.from_connection_string
  isExternal: false
  name: from_connection_string(conn_str, share=None, directory_path=None, credential=None,
    **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.from_connection_string
- fullName: azure.storage.file.DirectoryClient.get_directory_properties
  isExternal: false
  name: get_directory_properties(timeout=None, **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.get_directory_properties
- fullName: azure.storage.file.DirectoryClient.get_file_client
  isExternal: false
  name: get_file_client(file_name, **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.get_file_client
- fullName: azure.storage.file.DirectoryClient.get_subdirectory_client
  isExternal: false
  name: get_subdirectory_client(directory_name, **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.get_subdirectory_client
- fullName: azure.storage.file.DirectoryClient.list_directories_and_files
  isExternal: false
  name: list_directories_and_files(name_starts_with=None, marker=None, timeout=None,
    **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.list_directories_and_files
- fullName: azure.storage.file.DirectoryClient.list_handles
  isExternal: false
  name: list_handles(marker=None, recursive=False, timeout=None, **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.list_handles
- fullName: azure.storage.file.DirectoryClient.set_directory_metadata
  isExternal: false
  name: set_directory_metadata(metadata, timeout=None, **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.set_directory_metadata
- fullName: azure.storage.file.DirectoryClient.upload_file
  isExternal: false
  name: upload_file(file_name, data, length=None, metadata=None, content_settings=None,
    validate_content=False, max_connections=1, timeout=None, encoding='UTF-8', **kwargs)
  parent: azure.storage.file.DirectoryClient
  uid: azure.storage.file.DirectoryClient.upload_file
- fullName: dict(str, str)
  name: dict(str, str)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: str
    name: str
    uid: str
  - fullName: )
    name: )
  uid: dict(str, str)
- fullName: dict(str, Any)
  name: dict(str, Any)
  spec.python:
  - fullName: dict
    name: dict
    uid: dict
  - fullName: (
    name: (
  - fullName: str
    name: str
    uid: str
  - fullName: ', '
    name: ', '
  - fullName: Any
    name: Any
    uid: Any
  - fullName: )
    name: )
  uid: dict(str, Any)
