### YamlMime:UniversalReference
api_name: []
items:
- children:
  - azure.identity.EnvironmentCredential.get_token
  class: azure.identity.EnvironmentCredential
  fullName: azure.identity.EnvironmentCredential
  inheritance:
  - type: builtins.object
  langs:
  - python
  module: azure.identity
  name: EnvironmentCredential
  summary: "Authenticates as a service principal using a client ID/secret pair or\
    \ a certificate,\ndepending on environment variable settings.\n\nThese environment\
    \ variables are required:\n\n   * **AZURE_CLIENT_ID**: the service principal's\
    \ client ID \n\n   * **AZURE_TENANT_ID**: ID of the service principal's tenant.\
    \ Also called its 'directory' ID. \n\nAdditionally, set **one** of these to configure\
    \ client secret or certificate authentication:\n\n   * **AZURE_CLIENT_SECRET**:\
    \ one of the service principal's client secrets \n\n   * **AZURE_CLIENT_CERTIFICATE_PATH**:\
    \ path to a PEM-encoded certificate file including the private key"
  syntax:
    content: EnvironmentCredential(**kwargs)
  type: class
  uid: azure.identity.EnvironmentCredential
- class: azure.identity.EnvironmentCredential
  exceptions:
  - type: azure.core.exceptions.ClientAuthenticationError
  fullName: azure.identity.EnvironmentCredential.get_token
  langs:
  - python
  module: azure.identity
  name: get_token(*scopes)
  summary: Request an access token for *scopes*.
  syntax:
    content: get_token(*scopes)
    parameters:
    - description: desired scopes for the token
      id: scopes
      type:
      - str
    return:
      type:
      - <xref:azure.core.credentials.AccessToken>
  type: method
  uid: azure.identity.EnvironmentCredential.get_token
references:
- fullName: azure.identity.EnvironmentCredential.get_token
  isExternal: false
  name: get_token(*scopes)
  parent: azure.identity.EnvironmentCredential
  uid: azure.identity.EnvironmentCredential.get_token
